{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"SANDAG ABM3","text":"<p>Welcome to the SANDAG Activity-Based Travel Model documentation site!</p>"},{"location":"index.html#introduction","title":"Introduction","text":""},{"location":"applying.html","title":"Applying the model","text":"<p>This page contains information needed to apply the model.</p>"},{"location":"applying.html#network-coding","title":"Network Coding","text":"<p>//TODO: Describe network attributes, how to code network</p>"},{"location":"applying.html#population-synthesis","title":"Population Synthesis","text":"<p>//TODO: Describe population synthesis procedure, how to modify inputs and construct new future-year synthetic population</p>"},{"location":"applying.html#land-use-data-preparation","title":"Land-Use Data Preparation","text":"<p>//TODO: Describe how to prepare land-use data.</p> <p>Describe how to update parking costs, enrollment data.</p>"},{"location":"applying.html#micromobility","title":"Micromobility","text":"<p>//TODO: Describe how to run micromobility policy tests</p> <p>etc.</p>"},{"location":"design.html","title":"Model Design","text":"<p>The ABM3 model system is primarily based on the ActivitySim platform; ActivitySim is used to model resident travel, cross-border travel, overnight visitor travel, airport ground access travel, and commercial vehicle travel including light, medium, and heavy commercial vehicles. Aggregate models are used to model external-internal travel (from external stations other than the U.S./Mexico border crossing) and through travel. The model system relies on EMME software for network processing, skimming, and assignment. Models are mostly implemented in Python, and some models are implemented in Java (https://www.java.com/en/).</p> <p>The overall design of the model is shown in the figure below.</p> <p></p> <p>The system starts by performing initial input processing in EMME. This includes building transport networks and scenarios for skimming and assignment. An initial set of skims are created based on input trip tables (e.g. warm start). Then disaggregate choice models in ActivitySIm are run, including the resident model, the crossborder travel model, two airport ground access models, the overnight visitor model, and the commercial vehicle model. Next auxiliary models are run; the taxi/TNC routing model and the autonomous vehicle intra-household allocation model are run in Java. Aggregate external-internal and through travel models are run in Python. After all models are run, trip tables are built from the result and assigned to transport networks. A check is made to determine whether the model has reached convergence (currently this is set to three feedback iterations). If convergence is reached, outputs are processed for export to the SANDAG Datalake for reporting summaries. If not, speeds from assignment are averaged using method of successive averages, and skims are rebuilt for the next iteration. The model system is then re-run with the updated skims.</p> <p>ActivitySim is used to represent all internal travel and internal-external made by residents of the SANDAG region (modeled area).  The decision-makers in the model system include both persons and households. These decision-makers are created (synthesized) for each simulation year and land-use scenario, based on Census data and forecasted distributions of households and persons by key socio-economic categories. A similar but simplified method is used to generate disaggregate populations for cross-border, airport ground access, and overnight visitor models. The decision-makers are used in the subsequent discrete-choice models in a microsimulation framework where a single alternative is selected from a list of available alternatives according to a probability distribution.  The probability distribution is generated from a logit model which considers the attributes of the decision-maker and the attributes of the various alternatives. The application paradigm is referred to as Monte Carlo simulation, since a random number draw is used to select an alternative from the probability distribution. The decision-making unit is an important element of model estimation and implementation and is explicitly identified for each model specified in the following sections.</p> <p>A key advantage of using the micro-simulation approach is that there are essentially no computational constraints on the number of explanatory variables that can be included in a model specification.  However, even with this flexibility, the model system will include some segmentation of decision-makers.  Segmentation is a useful tool to both structure models (for example, each person type segment could have their own model for certain choices) and to characterize person roles within a household.  Segments can be created for persons as well as households.</p>"},{"location":"design.html#resident-model","title":"Resident Model","text":"<p>The resident model structure is based on the Coordinated Travel Regional Activity-based Modeling Platform (CT-RAMP). The figure below shows the resident model structure. In order to understand the flow chart, some definitions are required. These are described in more detail below.</p> <ul> <li>Tour: A sequence of trips that start and end at an anchor location. In ActivitySim, anchors are home or work.</li> <li>Primary destination: The \u201cmain\u201d activity of the tour; this activity determines the tour purpose. It also divides the tour into two \u201clegs\u201d; the sequence of trips from the anchor location to the primary destination is the outbound leg, and the sequence of trips from the primary destination back to the anchor location is the inbound or return leg.</li> <li>Mandatory activity: Work or school</li> <li>Non-mandatory activity: Any out of home activity that is not work or school, including maintenance activities such as shopping as well as discretionary activities such as out-of-home recreation and eating out.</li> <li>Fully joint tour: A tour in which two or more household members travel together to all out-of-home activity locations and return home together. In other words, no household member is picked-up or dropped-off en route.</li> <li>Intermediate stop: An out-of-home activity location on the tour other than the anchor location or the primary destination. Intermediate stops are made on the way from the anchor location to the primary destination (outbound) or on the way from the primary destination back to the anchor location (inbound).</li> <li>Tour mode: The \u201cmain mode\u201d or \u201cpreferred mode\u201d of the tour. This is an abstract concept used categorize the tour with respect to accessibility and constrain the availability of modes for trips on the tour to ensure some consistency of modes used for each trip.</li> </ul> <p>The resident model design is shown below.</p> <p></p> <p>The first model in the sequence is disaggregate accessibilities. This is a recent addition to ActivitySim in which the tour destination choice model is run for a prototypical sample population covering key market segments and destination choice logsums from the model are written out for each tour in the population. These destination choice logsums are then merged with the actual synthetic population and used as accessibility variables in downstream models such as auto ownership, coordinated daily activity patterns, and tour frequency. are mandatory location choice; this model is run for all workers and students regardless of whether they attend work or school on the simulated day.</p> <p>Next a set of long-term and mobility models are run. The first model in the sequence predicts whether an autonomous vehicle is owned by the household. This model conditions the next model, which predicts the number of autos owned. If an autonomous vehicle is owned, multiple cars are less likely. Next, the mandatory (work and school) location choice models are run. The work location choice models includes a model to predict whether the worker has a usual out-of-home work location or exclusively works from home. If the worker chooses to work from home, they will not generate a work tour. An external worker identification model determines whether each worker with an out-of-home workplace location works within the region or external to the region. If they work external to the region, the external station is identified. Any primary destination of any work tours generated by the worker will be the external station chosen by this model. A work location choice model predicts the internal work location of each internal worker, and a school location choice model predicts the school location of each student.</p> <p>Next, a set of models predicts whether workers and students have subsidized transit fares and if so, the percent of transit fare that is subsidized, and whether each person in the household owns a transit pass. A vehicle type choice model then runs, which predicts the body type, fuel type, and age of each vehicle owned by the household; this model was extended to predict whether each vehicle is autonomous, conditioned by the autonomous vehicle ownership model.</p> <p>Next, we predict whether each household has access to a vehicle transponder which can be used for managed lane use. We assume that all vehicles built after a certain year (configurable by the user) are equipped with transponders. Next we predict whether each worker has subsidized parking available at work. Finally we predict the telecommute frequency of each worker, which affects downstream models including the daily activity pattern model, the non-mandatory tour frequency model, and stop frequency models.</p> <p>Next the daily and tour level models are run. The first daily model is the daily activity pattern model is run, which predicts the general activity pattern type for every household member. Then Mandatory tours are generated for workers and students, the tours are scheduled (their location is already predicted by the work/school location choice model), a vehicle availability model is run that predicts which household vehicle would be used for the tour, and the tour mode is chosen. After mandatory tours are generated, a school pickup/dropoff model forms half-tours where children are dropped off and/or picked up at school. The model assigns chaperones to drive or ride with children, groups children together into \u201cbundles\u201d for ride-sharing, and assigns the chaperone task to either a generated work tour or generates a new tour for the purpose of ridesharing. Fully joint tours \u2013 tours where two or more household members travel together for the entire tour - are generated at a household level, their composition is predicted (adults, children or both), the participants are determined, the vehicle availability model is run, and a tour mode is chosen. The primary destination of fully joint tours is predicted, the tours are scheduled, the vehicle availability model is run, and a tour mode is chosen. Next, non-mandatory tours are generated, their primary destination is chosen, they are scheduled, the vehicle availability model is run, and a tour mode is chosen for each. At-work subtours are tours that start and end at the workplace. These are generated, scheduled (with constraints that the start and end times must nest within the start and end time of the parent work tour), a primary destination is selected, the vehicle availability model is run, and a tour mode is chosen.</p> <p>At this point, all tours are generated, scheduled, have a primary destination, and a selected tour mode. The next set of models fills in details about the tours - number of intermediate stops, location of each stop, the departure time of each stop, and the mode of each trip on the tour. Finally, the parking location of each auto trip to the central business district (CBD) is determined. After the model is run, the output files listed above are created. The trip lists are then summarized into origin-destination matrices by time period and vehicle class or transit mode and assigned to the transport network.</p>"},{"location":"design.html#crossborder-model","title":"Crossborder Model","text":""},{"location":"design.html#airport-ground-access-models","title":"Airport Ground Access Models","text":""},{"location":"design.html#overnight-visitor-models","title":"Overnight VIsitor Models","text":""},{"location":"inputsandoutputs.html","title":"Inputs and Outputs","text":"<p>The main inputs to ABM3 include the transportation network, land-use data, synthetic population data, parameters files, and model specifications. Outputs include a set of files that describe travel decisions made by all travel markets considered by the model (residents, overnight visitors, airport ground access trips, commercial vehicles and trucks, Mexico residents traveling in San Diego County, and travel made by all other non-residents into and through San Diego County.</p>"},{"location":"inputsandoutputs.html#file-types","title":"File Types","text":"<p>There are several file types used for model inputs and outputs. They are denoted by their extension, as listed in the table below.</p> Extension Format .log, .txt Text files created during a model run containing logging results. .yaml Text files used for setting properties that control ActivitySim or some other process. .csv Comma-separated value files used to store model parameters, input or output data. .omx Open matrix format files used to store input or output trip tables or skims .h5 HDF5 files, used to store pipeline for restarting ActivitySim .shp (along with other files - .cpg, .dbf, .prj, .shx) ArcGIS shapefiles and associated files .html Hypertext markup language files, open in web browser .png Portable network graphics file, open in web browser, Microsoft photos, or third-party graphics editor"},{"location":"inputsandoutputs.html#model-inputs","title":"Model Inputs","text":"<p>//TODO List here</p>"},{"location":"inputsandoutputs.html#model-outputs","title":"Model Outputs","text":"<p>Model outputs are stored in the .\\outputs directory. The contents of the directory are listed in the table below.</p>"},{"location":"inputsandoutputs.html#output-directory-output","title":"Output Directory (.\\output)","text":"Directory\\File Name Description airport.CBX (directory) Outputs for Cross-Border Express Airport Ground Access Model airport.SAN (directory) Outputs for San Diego International Airport Ground Access Model assignment (directory) Assignment outputs crossborder (directory) Crossborder Travel Model outputs cvm (directory) Commercial Vehicle Model outputs parking (directory) Parking model outputs resident (directory) Resident model outputs skims (directory) Skim outputs visitor (directory) Visitor Model outputs bikeMgraLogsum.csv Bike logsum file for close-together MGRAs bikeTazLogsum.csv Bike logsum file for TAZs datalake_metadata.yaml Metadata file for datalake reporting system derivedBikeEdges.csv Derived bike network edge file derivedBikeNodes.csv Derived bike network node file derivedBikeTraversals.csv Derived bike network traversals file microMgraEquivMinutes.csv Equivalent minutes for using micromobility between close-together MGRAs (not used) runtime_summary.csv Summary of model runtime temp_tazdata_cvm.csv TAZ data for commercial vehicle model transponderModelAccessibilities.csv Transponder model accessibilities (not used) trip_(period).omx Trips for each time period, for assignment walkMgraEquivMinutes.csv Equivalent minutes for walking between close-together MGRAs"},{"location":"inputsandoutputs.html#activitysim-log-files","title":"ActivitySim log files","text":"<p>ActivitySim writes out various log files when it runs; these have standard names for each model component. Therefore we list them separately, but copies of these files may be in each model\u2019s output directory depending upon the settings used to run ActivitySim for that model component.</p> **File ** Description activitysim.log ActivitySim log file for model breadcrumbs.yaml Breadcrumbs provides a record of steps that have been run for use when resuming a model run final_checkpoints.csv ActivitySim checkpoint file final_pipeline.h5 ActivitySim pipeline file mem.csv ActivitySim memory use log file mem_mp_households.csv Memory logs for ActivitySim model steps running with the same num_processes (all except accessibility, initialize, and summarize) mem_mp_initialize.csv Memory logs for ActivitySim model step initialize mem_mp_summarize.csv Memory logs for ActivitySim model step summarize mp_households_(processnumber)-activitysim.log ActivitySim log file for processnumber. This logfile is created if model is run in multiprocess mode mp_households_(processnumber)-mem.csv Memory log file for processnumber mp_households_apportion-activitysim.log ActivitySim log file for apportioning data between multiple processes mp_households_coalesce-activitysim.log ActivitySIm logfile for coalesing output from multiple processes into one mp_initialize-activitysim.log ActivitySim log file for the initialization steps mp_initialize-mem.csv Memory logs for ActivitySim model step summarize (similar to mp_initialize-mem.csv) mp_setup_skims-activitysim.log ActivitySim logfile for reading in skims mp_summarize-activitysim.log ActivitySim log file for summarizing model output (omx and csv trip table) mp_summarize-mem.csv Memory logs for ActivitySim model step summarize (similar to mem_mp_initialize.csv) mp_tasks_log.txt Log files of multiprocessed steps omnibus_mem.csv Memory log file of all model steps (similar to mem.csv) run_list.txt List of models that have been run timing_log.csv Model run time by steps"},{"location":"inputsandoutputs.html#airport-model-outputs-airportcbx-airportsan","title":"Airport model outputs (.\\airport.CBX, .\\airport.SAN)","text":"<p>There are two subdirectories containing outputs for each of the two airport models. airport.CBX contains output for the Cross-Border Express model, and airport.SAN contains output for the San Diego International Airport model. Each directory has identical files so we provide one generic output table below.</p> Filename Description final_(airport)accessibility.csv Accessibility file for airport (cbx, san) (not used, created by default) final_(airport)households.csv Household file for airport (cbx, san) final_(airport)land_use.csv Land-use file for airport (cbx, san) final_(airport)persons.csv Persons file for airport (cbx, san) final_(airport)tours.csv Tour file for airport (cbx, san) final_(airport)trips.csv Trip file for airport (cbx, san) model_metadata.yaml Datalake metadata file nmotairporttrips.(airport)_(period).omx Non-motorized trip table for airport (CBX, SAN) by period (EA, AM, MD, PM, EV)"},{"location":"inputsandoutputs.html#assignment-model-trip-tables-assignment","title":"Assignment model trip tables (.\\assignment)","text":"<p>This directory contains trip tables from auto and transit assignments.</p> **File ** Description autoairportTrips.(airport)(period(vot).omx Auto trip table for airport (CBX, SAN) by period (EA, AM, MD, PM, EV) and value of time (low, medium, high) autocrossborderTrips_(period)_(vot).omx Auto trip table for cross border model by period (EA, AM, MD, PM, EV) and value of time (low, medium, high) autoTrips_(period)_(vot).omx Auto trip table for resident model by period (EA, AM, MD, PM, EV) and value of time (low, medium, high) autovisitorTrips_(period)_(vot).omx Auto trip table for visitor model by period (EA, AM, MD, PM, EV) and value of time (low, medium, high) emptyAVTrips.omx Empty private autonomous vehicle trips householdAVTrips.csv All private autonomous vehicle trips TNCTrips.csv All TNC trips TNCVehicleTrips_(period).omx TNC vehicle trip table by period (EA, AM, MD, PM, EV) TranairportTrips.(airport)_(period).omx Transit trip tables for airport (CBX, SAN) by period (EA, AM, MD, PM, EV) TrancrossborderTrips_(period).omx Transit trip tables for cross-border model by period (EA, AM, MD, PM, EV) TranTrips_(period).omx Transit trip tables for resident model by period (EA, AM, MD, PM, EV) TranvisitorTrips_(period).omx Transit trip tables for visitor model by period (EA, AM, MD, PM, EV) TripMatrices.csv Disaggregate commercial vehicle trips"},{"location":"inputsandoutputs.html#crossborder-model-outputs-crossborder","title":"Crossborder model outputs (.\\crossborder)","text":"<p>This directory contains outputs from the Crossborder model, which represents all travel made by Mexico residents in San Diego County.</p> **File ** Description final_accessibility.csv Accessibility file for Crossborder Model (not used, created by default) final_households.csv Household file for Crossborder Model final_land_use.csv Land-use file for Crossborder Model final_persons.csv Persons file for Crossborder Model final_tours.csv Tour file for Crossborder Model final_trips.csv Tour file for Crossborder Model model_metadata.yaml Model run meta data for use in Datalake storage and reporting nmCrossborderTrips_AM.omx Non-motorized trip table for Crossborder Model by period (EA, AM, MD, PM, EV) othrCrossborderTrips_AM.omx Other trip table for Crossborder Model by period (EA, AM, MD, PM, EV)"},{"location":"inputsandoutputs.html#commercial-vehicle-model-cvm","title":"Commercial Vehicle Model (.\\cvm)","text":"<p>//TODO Update with CVM results once model is updated</p>"},{"location":"inputsandoutputs.html#parking-cost-calculations-parking","title":"Parking cost calculations (.\\parking)","text":"<p>This directory contains intermediate files and final expected parking costs calculated from input parking supply data and walk distances between MGRAs.</p> **File ** Description aggregated_street_data.csv Street length and intersections aggregated to MGRA level, used to estimate free on-street parking spaces cache (directory) Directory containing intermediate calculations for expected parking costs distances.csv MGRA-MGRA distances used for expected parking cost calculations districts.csv Calculated parking districts at MGRA level used for expected parking cost calculations final_parking_data.csv Expected hourly, daily, and monthly parking costs, total spaces, and parking district at the MGRA level for use in travel models plots Directory containing plots of the parking model results shapefiles Directory containing shapefiles for parking model calculations"},{"location":"inputsandoutputs.html#resident-model-outputs-resident","title":"Resident model outputs (.\\resident)","text":"<p>This directory contains San Diego resident travel model outputs.</p> File Description cdap_joint_spec_(persons).csv Model specification file for coordinated daily activity pattern model joint tour alternative for (persons)-way interaction terms cdap_spec_(persons).csv Model specification file for coordinated daily activity pattern model for (persons)-way interaction terms. data_dict.csv Data dictionary for resident model, csv format data_dict.txt Data dictionary for resident model, text format final_accessibility.csv Resident model aggregate accessibility file final_disaggregate_accessibility.csv Resident model disaggregate accessibility file at MGRA level final_households.csv Resident model household file final_joint_tour_participants.csv Resident model joint tour participants file final_land_use.csv Resident model land-use file final_persons.csv Resident model persons file final_proto_disaggregate_accessibility.csv Resident model disaggregate accessibility file at person level final_tours.csv Resident model tour file final_trips.csv Resident model trip file final_vehicles.csv Resident model vehicle file log (directory) Directory for resident model logging output model_metadata.yaml Resident model Datalake metadata file nmottrips_AM.omx Resident model non-motorized trip tables by period (EA, AM, MD, PM, EV) skim_usage.txt Skim usage file trace (directory) Directory for resident model trace output"},{"location":"inputsandoutputs.html#skims-skims","title":"Skims (.\\skims)","text":"<p>This directory contains auto, transit, and non-motorized level-of-service matrices, also known as skims. Each file is a collection of origin destination tables of times and costs, at the TAZ level.</p> File Description dest_pmsa.omx A matrix containing pseudo - metropolitan statistical area code for each destination TAZ dest_poi.omx A matrix containing point of interest code for each destination TAZ (currently zeros) dest_poi.omx.csv A csv file containing point of interest code for each destination TAZ (currently zeros) impm(truck type)(toll type)(period)(matrixtype).txt Truck impedance matrix for truck type (ld = Light duty, lhd = light heavy duty, mhd = medium heavy duty, hhd = heavy heavy duty), toll type (n = non-toll, t = toll) and matrixtype (DU = utility, dist = distance, time = time) maz_maz_bike.csv Bike logsums between close together MGRAs maz_maz_walk.csv Walk times between close together MGRAs maz_stop_walk.csv Walk times between MGRAs and transit stops taz_pmsa_xwalk.csv Crosswalk file between pseudo-metropolitan statistical areas and TAZs traffic_skims_(period).omx Auto skims by period (EA, AM, MD, PM, EV) transit_skims_(period).omx Transit skims by period (EA, AM, MD, PM, EV)"},{"location":"inputsandoutputs.html#visitor-model-outputs-visitor","title":"Visitor model outputs (.\\visitor)","text":"<p>This directory contains outputs from the overnight visitor model.</p> File Description final_households.csv Visitor model household file final_land_use.csv Visitor model land-use file final_persons.csv Visitor model person file final_tours.csv Visitor model tour file final_trips.csv Visitor model trip file model_metadata.yaml Visitor model Datalake metadata file nmotVisitortrips_(period).omx Visitor model non-motorized trips by period (EA, AM, MD, PM, EV)"},{"location":"running.html","title":"Installing and Running ABM3","text":"<p>This page describes how to install and run ABM3, including hardware and software requirements. In general, a powerful server is required to run the model. The main software required for the model includes EMME, Python, and Java. EMME is a commercial transportation modeling platform that must be purchased separately and requires a computer with a Windows operating system. Python is an open-source cross-platform programming language that is currently one of the most popular programming languages. Python is the core language of ActivitySim. Java is an open-source programming language required for certain model components. </p>"},{"location":"running.html#system-requirements","title":"System Requirements","text":"<p>ABM3 runs on a Microsoft Windows workstation or server, with the minimum and recommended system specification as follows:</p> <p>Minimum specification:</p> <ul> <li>Operating System: 64-bit Windows 7, 64-bit Windows 8 (8.1), 64-bit Windows 10, 64-bit Windows Server 2019</li> <li>Processor: 24-core CPU processor</li> <li>Memory: 1 TB RAM</li> <li>Disk space: 600 GB</li> </ul> <p>Recommended specification:</p> <ul> <li>Operating System: 64-bit Windows 10</li> <li>Processor: Intel CPU Xeon Gold / AMD CPU Threadripper Pro (24+ cores)</li> <li>Memory: 1 TB RAM</li> <li>Disk space: 1200 GB</li> </ul> <p>In general, a higher CPU core count and RAM will result in faster run times as long as ActivitySim is configured to utilize the additional processors and RAM. Note that the model is unlikely to run on servers that have less than 1 TB of RAM.</p>"},{"location":"running.html#software-requirements","title":"Software Requirements","text":"<p>Three software applications, EMME, Python package manager Anaconda, and Java should be installed on the computer that will be used to run the model. The ABM3 model system is an integrated model that is controlled by and primarily runs in the EMME transportation planning software platform. EMME is used for network assignment and creating transportation skims, and the model\u2019s Graphical User Interface (GUI). The software also provides functionality for viewing and editing highway and transit network files and viewing of matrix files. The Bentley Connect Edition software (the license manager for EMME) will need to be logged in and activated prior to running the model. </p> <p>A Python package manager is software that creates an environment for an instance of Python. ActivitySim and related Python processes in the model are executed in an environment that is setup with a specific version of Python and specific library versions. This ensures that changes outside of the Python environment will not cause errors or change model results, and additionally ensure that the specific version of Python and specific libraries needed by the model do not cause errors or changes to other Python software installations on the server. The libraries needed by ActivitySim extend the base functionality of Python. Note that Anaconda requires a paid subscription for agencies larger than 200 users. To install Anaconda, follow the instructions here. </p> <p>Java is required in order to create bicycle logsums, run the taxi/TNC routing model, and run the intra-household autonomous vehicle routing model. The model has been tested against Java version 8 (e.g. 1.8) but should run in later versions as well. </p>"},{"location":"running.html#installing-abm3-model","title":"Installing ABM3 Model","text":"<p>As noted above, Anaconda will need to be installed. Once one of those two package managers is installed, a specific computer environment must be created to run ActivitySim. The environment is a configuration of Python that is for ActivitySim - this environment allows ActivitySim to use specific software libraries without interfering with the server\u2019s installed version of Python (if one exists, it is not required) and keeps other Python installations from interfering with ActivitySim. To create the environment, use the following commands from within the Anaconda PowerShell Prompt. </p> <p>First, change directories using cd /d to the model\u2019s ActivitySim config folder, which is /source/configs/activitysim (e.g., cd /d e:\\ABM3\\source\\configs\\activitysim) prior to running the command below.</p> <p>conda env create \u2013file environment.yml </p> <p>After installing the environment, do a quick test of it by activating it, using:</p> <p>conda activate asim_baydag</p> <p>//TODO</p> <p>Describe how to set up the model on a new machine</p>"},{"location":"running.html#the-abm3-gui","title":"The ABM3 GUI","text":"<p>//TODO</p> <p>Show the GUI and describe the options</p>"}]}