Description,Step,Type,Table,Out Col,In Col,Func
#,,,,,,
calculate HH weights,step_1,raw,final_households,finalweights,sample_rate,final_households['finalweights'] = 1/final_households['sample_rate']
copy weight files,step_1,raw,final_persons,,,final_persons['finalweights'] = final_persons['household_id'].map(final_households.set_index('household_id')['finalweights']).fillna(0)
copy weight files,step_1,raw,final_tours,,,final_tours['finalweights'] = final_tours['household_id'].map(final_households.set_index('household_id')['finalweights']).fillna(0)
copy weight files,step_1,raw,final_trips,,,final_trips['finalweights'] = final_trips['household_id'].map(final_households.set_index('household_id')['finalweights']).fillna(0)
add origin purpose to final trip file,step_1,raw,,,,"final_trips = final_trips.assign(orig_purpose=final_trips.groupby(['person_id','tour_id']).purpose.shift(+1))"
fill NaN origin purpose with the purpose of last trip,step_1,raw,,,,m = final_trips['orig_purpose'].isna()
fill NaN origin purpose with the purpose of last trip,step_1,raw,,,,"final_trips.loc[m, 'orig_purpose'] = final_trips.groupby(['person_id','tour_id']).purpose.tail(1).values"
rename trip purpose to destination purpose,step_1,rename,final_trips,,,"{'primary_purpose': 'tour_purpose','purpose': 'dest_purpose', 'origin': 'orig_mgra', 'destination': 'dest_mgra'}"
rename,step_1,rename,final_tours,,,"{'primary_purpose': 'tour_purpose','origin': 'orig_mgra', 'destination': 'dest_mgra',  'duration' : 'tourdur'}"
Get tour origin TAZ,step_1,raw,final_tours,,,final_tours['originTAZ'] = final_tours['orig_mgra'].map(geographicXwalk_PMSA.set_index('mgra')['taz']).fillna(0)
Get tour destination TAZ,step_1,raw,final_tours,,,final_tours['destinationTAZ'] = final_tours['dest_mgra'].map(geographicXwalk_PMSA.set_index('mgra')['taz']).fillna(0)
Get trip origin TAZ,step_1,raw,final_trips,,,final_trips['originTAZ'] =final_trips['orig_mgra'].map(geographicXwalk_PMSA.set_index('mgra')['taz']).fillna(0)
Get trip destination TAZ,step_1,raw,final_trips,,,final_trips['destinationTAZ'] = final_trips['dest_mgra'].map(geographicXwalk_PMSA.set_index('mgra')['taz']).fillna(0)
Trip OD raw distance,step_1,skim,final_trips,od_distance,"originTAZ,destinationTAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
adjust tour duration (no 0),step_1,raw,,,,final_tours['tourdur'] = final_tours['tourdur'] + 1
get person number to final tour file,step_1,raw,,,,final_tours['person_num'] = final_tours['person_id'].map(final_persons.set_index('person_id')['PNUM']).fillna(0)
get person number to final trip  file,step_1,raw,,,,final_trips['person_num'] = final_trips['person_id'].map(final_persons.set_index('person_id')['PNUM']).fillna(0)
get tour mode to final trip file,step_1,raw,,,,final_trips['tour_mode'] = final_trips['tour_id'].map(final_tours.set_index('tour_id')['tour_mode']).fillna(0)
get person type to final tour file,step_1,raw,,,,final_tours['person_type'] = final_tours['person_id'].map(final_persons.set_index('person_id')['ptype']).fillna(0)
add number of outbound stops,step_1,raw,,num_ob_stops,,final_tours['num_ob_stops'] =  final_tours['stop_frequency'].str[0].astype(int)
add number of inbound stops,step_1,raw,,num_ib_stops,,final_tours['num_ib_stops'] = final_tours['stop_frequency'].str[5].astype(int)
add inbound to final trip file,step_1,raw,,inbound,,"final_trips['inbound'] = np.where(final_trips['outbound'] == True, 0, 1)"
get individual tour file,step_1,raw,,,,indivTourData_3 = final_tours.loc[final_tours['tour_category']!='joint']
get joint tour file,step_1,raw,,,,jointTourData_3 = final_tours.loc[final_tours['tour_category']=='joint']
Multiply tour weights by number of participants,step_1,column,jointTourData_3,finalweights,,finalweights * number_of_participants
get individual trip file,step_1,raw,,,,indiv_list = indivTourData_3['tour_id'].tolist()
get individual trip file,step_1,raw,,,,indivTripData_3 = final_trips[final_trips['tour_id'].isin(indiv_list)]
get joint trip file,step_1,raw,,,,joint_list = jointTourData_3['tour_id'].tolist()
get joint trip file,step_1,raw,,,,jointTripData_3 = final_trips[final_trips['tour_id'].isin(joint_list)]
Get number of participants on joint trips,step_1,raw,,,,jointTripData_3['number_of_participants'] = jointTripData_3['tour_id'].map(jointTourData_3.set_index('tour_id')['number_of_participants'])
Multiply trip weights by number of participants,step_1,column,jointTripData_3,finalweights,,finalweights * number_of_participants
#,,,,,,
Add unique tour ids to individual tour file,step_1,raw,,,,maxtours = indivTourData_3['person_id'].value_counts().max()
Add unique tour ids to individual tour file,step_1,raw,,,,"indivTourData_3['cummulative_tours'] = range(1, indivTourData_3.shape[0] + 1)"
Add unique tour ids to individual tour file,step_1,raw,,,,"indivTourData_3['last_person'] = np.hstack(([0], indivTourData_3['person_id'][:-1]))"
Add unique tour ids to individual tour file,step_1,raw,,,,indivTourData_3['new_person'] = (indivTourData_3['person_id']) != (indivTourData_3['last_person'])
Add unique tour ids to individual tour file,step_1,raw,,,,"indivTourData_3['to_subtract'] = indivTourData_3['new_person'] * np.hstack(([0], indivTourData_3['cummulative_tours'].iloc[:-1]))"
Add unique tour ids to individual tour file,step_1,raw,,,,"for i in range(maxtours): indivTourData_3['to_subtract'] = np.where(indivTourData_3['to_subtract'] == 0, np.hstack(([0], indivTourData_3['to_subtract'].iloc[:-1])), indivTourData_3['to_subtract'])"
Add unique tour ids to individual tour file,step_1,raw,,,,indivTourData_3['tour_id2'] = indivTourData_3['cummulative_tours'] - indivTourData_3['to_subtract']
#,,,,,,
Add unique tour ids to individual trip file,step_1,raw,,,,maxtrips = indivTripData_3['person_id'].value_counts().max()
Add unique tour ids to individual trip file,step_1,raw,,,,indivTripData_3['new_tour'] = (indivTripData_3['orig_purpose'] == 'home') | ((indivTripData_3['tour_purpose'] == 'atwork') & (indivTripData_3['orig_purpose'] == 'work'))
Add unique tour ids to individual trip file,step_1,raw,,,,indivTripData_3['cummulative_tours'] = np.cumsum(indivTripData_3['new_tour'])
Add unique tour ids to individual trip file,step_1,raw,,,,"indivTripData_3['last_person'] = np.hstack(([0], indivTripData_3['person_id'][:-1]))"
Add unique tour ids to individual trip file,step_1,raw,,,,indivTripData_3['new_person'] = (indivTripData_3['person_id']) != (indivTripData_3['last_person'])
Add unique tour ids to individual trip file,step_1,raw,,,,"indivTripData_3['to_subtract'] = indivTripData_3['new_person'] * np.hstack(([0], indivTripData_3['cummulative_tours'].iloc[:-1]))"
Add unique tour ids to individual trip file,step_1,raw,,,,"for i in range(maxtrips): indivTripData_3['to_subtract'] = np.where(indivTripData_3['to_subtract'] == 0, np.hstack(([0], indivTripData_3['to_subtract'].iloc[:-1])), indivTripData_3['to_subtract'])"
Add unique tour ids to individual trip file,step_1,raw,,,,indivTripData_3['tour_id2'] = indivTripData_3['cummulative_tours'] - indivTripData_3['to_subtract']
#,,,,,,
Individual Tour distance,step_1,raw,indivTripData_3,,,indivTripData_3['tour_distance'] = indivTripData_3.groupby('tour_id')['od_distance'].transform('sum')
Joint tour distance,step_1,raw,jointTripData_3,,,jointTripData_3['tour_distance'] = jointTripData_3.groupby('tour_id')['od_distance'].transform('sum')
Add tour distance to individual tour table,step_1,raw,indivTourData_3,,,"indivTourData_3 = indivTourData_3.merge(indivTripData_3[['tour_id','tour_distance']], on = 'tour_id')"
Add tour distance to joint tour table,step_1,raw,jointTourData_3,,,"jointTourData_3 = jointTourData_3.merge(jointTripData_3[['tour_id','tour_distance']], on = 'tour_id')"
,,,,,,
#,,,,,,
Get person hh ID and number,step_1,raw,,,,final_persons['hhper_id'] = final_persons['household_id'].astype(str) + '-' + final_persons['PNUM'].astype(str)
Cap Auto Ownership,step_1,cap,final_households,HHVEH,auto_ownership,4
get HH taz,step_1,raw,,,,final_persons['HHTAZ'] = final_persons['home_zone_id'].map(geographicXwalk_PMSA.set_index('mgra')['taz']).fillna(0)
get HH district,step_1,raw,,,,final_persons['HDISTRICT'] = final_persons['home_zone_id'].map(geographicXwalk_PMSA.set_index('mgra')['pmsa']).fillna(0)
get work taz,step_1,raw,,,,final_persons['WTAZ'] = final_persons['workplace_zone_id'].map(geographicXwalk_PMSA.set_index('mgra')['taz']).fillna(0)
get work district,step_1,raw,,,,final_persons['WDISTRICT'] = final_persons['workplace_zone_id'].map(geographicXwalk_PMSA.set_index('mgra')['pmsa']).fillna(0)
get school taz,step_1,raw,,,,final_persons['STAZ'] = final_persons['school_zone_id'].map(geographicXwalk_PMSA.set_index('mgra')['taz']).fillna(0)
get school district,step_1,raw,,,,final_persons['SDISTRICT'] = final_persons['school_zone_id'].map(geographicXwalk_PMSA.set_index('mgra')['pmsa']).fillna(0)
Get work location distances,step_1,skim,final_persons,WorkLocationDistance,"HHTAZ,WTAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
Get school location distances,step_1,skim,final_persons,SchoolLocationDistance,"HHTAZ,STAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
Bin distances to work,step_1,bin,final_persons,workdistbin,WorkLocationDistance,[-99999] + list(range(51)) + [99999]
Bin distances to school,step_1,bin,final_persons,schooldistbin,SchoolLocationDistance,[-99999] + list(range(51)) + [99999]
Recode distance bin to maximum,step_1,apply,final_persons,workdistbin,workdistbin,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0])))"
Recode distance bin to maximum,step_1,apply,final_persons,schooldistbin,schooldistbin,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0])))"
Bin tour distance,step_1,bin,indivTourData_3,tourdistbin,tour_distance,[-99999] + list(range(42)) + [99999]
Bin tour distance,step_1,bin,jointTourData_3,tourdistbin,tour_distance,[-99999] + list(range(42)) + [99999]
Recode distance bin to maximum,step_1,apply,indivTourData_3,tourdistbin,tourdistbin,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0])))"
Recode distance bin to maximum,step_1,apply,jointTourData_3,tourdistbin,tourdistbin,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0])))"
Reset persons index,step_1,raw,final_persons,,,final_persons = final_persons.reset_index()
Classify Person Type,step_1,rename,final_persons,,,{'ptype' : 'PERTYPE'}
Classify individual mandatory tour frequency,step_1,replace,final_persons,imf_choice,mandatory_tour_frequency,"{'work1': 1, 'work2': 2, 'school1': 3, 'school2': 4, 'work_and_school': 5}"
Classify individual mandatory tour frequency,step_1,raw,,,,final_persons['imf_choice'].fillna(0)
Classify individual mandatory tour frequency,step_1,rename,final_persons,,,{'non_mandatory_tour_frequency': 'inmf_choice'}
Reclassify activity pattern,step_1,raw,final_persons,activity_pattern,,"final_persons['activity_pattern'] = np.where((final_persons['cdap_activity'] == 'M') & (final_persons['imf_choice'] == 0),  np.where(final_persons['inmf_choice'] > 0, 'N', 'H'), final_persons['cdap_activity'])"
Calculate HH Size,step_1,raw,final_households,HHSIZ,,"final_households['HHSIZ'] = final_households['household_id'].map(final_persons[['household_id', 'person_id']].groupby('household_id').count()['person_id'])"
Cap Household Size at 5,step_1,cap,final_households,HHSIZE,HHSIZ,5
Identify households with joint tour present,step_1,raw,final_households,JOINT,,"final_households['JOINT'] = np.where(final_households['num_hh_joint_tours'] != 0, 1, 0)"
#,,,,,,
Recode individual tour purposes,step_1,replace,indivTourData_3,TOURPURP,tour_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
Recode joint tour purposes,step_1,replace,jointTourData_3,TOURPURP,tour_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
Recode individual trip origin purposes,step_1,replace,indivTripData_3,OPURP,orig_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
Recode individual trip destination purposes,step_1,replace,indivTripData_3,DPURP,dest_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
Recode individual trip tour purposes,step_1,replace,indivTripData_3,TOURPURP,tour_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
Recode joint trip origin purposes,step_1,replace,jointTripData_3,OPURP,orig_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
Recode joint trip destination purposes,step_1,replace,jointTripData_3,DPURP,dest_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
Recode joint trip tour purposes,step_1,replace,jointTripData_3,TOURPURP,tour_purpose,"{'home': 0, 'work': 1, 'univ': 2,  'school': 3, 'escort': 4, 'shopping': 5, 'othmaint': 6, 'eatout': 7, 'social': 8, 'othdiscr': 9, 'atwork': 10}"
#,,,,,,
Classify individual tour purpose,step_1,replace,indivTourData_3,AGGPURP,TOURPURP,"{1: '1: Work', 2: '2: University', 3: '3: School', 4: '4: Escort', 5: '5: Individual Maintenance', 6: '5: Individual Maintenance', 7: '6: Individual Discretionary', 8: '6: Individual Discretionary', 9: '6: Individual Discretionary', 10: '9: Work-based'}"
Classify joint tour purpose,step_1,replace,jointTourData_3,AGGPURP,TOURPURP,"{5: '7: Joint Maintenance', 6: '7: Joint Maintenance', 7: '8: Joint Discretionary', 8: '8: Joint Discretionary', 9: '8: Joint Discretionary'}"
Classify individual trip purpose,step_1,replace,indivTripData_3,AGGPURP,TOURPURP,"{1: '1: Work', 2: '2: University', 3: '3: School', 4: '4: Escort', 5: '5: Individual Maintenance', 6: '5: Individual Maintenance', 7: '6: Individual Discretionary', 8: '6: Individual Discretionary', 9: '6: Individual Discretionary', 10: '9: Work-based'}"
Classify joint trip purpose,step_1,replace,jointTripData_3,AGGPURP,TOURPURP,"{5: '7: Joint Maintenance', 6: '7: Joint Maintenance', 7: '8: Joint Discretionary', 8: '8: Joint Discretionary', 9: '8: Joint Discretionary'}"
#,,,,,,
Categorize individual tour,step_1,replace,indivTourData_3,TOURCAT,TOURPURP,"{1: 0, 2: 0, 3: 0, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2}"
Categorize individual trip,step_1,replace,indivTripData_3,TOURCAT,TOURPURP,"{1: 0, 2: 0, 3: 0, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 2}"
Create lookup for joining individual tours and trips,step_1,raw,,,,"indivTourData_3['lookup'] = indivTourData_3[['household_id', 'person_num', 'TOURCAT', 'tour_id2']].dot([100000, 1000, 100, 1])"
Create lookup for joining individual tours and trips,step_1,raw,,,,"indivTripData_3['lookup'] = indivTripData_3[['household_id', 'person_num', 'TOURCAT', 'tour_id2']].dot([100000, 1000, 100, 1])"
Create lookup for joining joint tours and trips,step_1,raw,,,,"jointTourData_3['lookup'] = list(zip(jointTourData_3['household_id'], jointTourData_3['tour_id']))"
Create lookup for joining joint tours and trips,step_1,raw,,,,"jointTripData_3['lookup'] = list(zip(jointTripData_3['household_id'], jointTripData_3['tour_id']))"
Add column for grouping all tours,step_1,raw,,,,indivTourData_3['label'] = 'purpose'
Add column for grouping all tours,step_1,raw,,,,jointTourData_3['label'] = 'purpose'
#,,,,,,
Get tour destination TAZ for individual trips,step_1,raw,,,,indivTripData_3['TOURDTAZ'] = indivTripData_3['lookup'].map(indivTourData_3.drop_duplicates('lookup').set_index('lookup')['destinationTAZ'])
Get tour origin TAZ for individual trips,step_1,raw,,,,indivTripData_3['TOUROTAZ'] = indivTripData_3['lookup'].map(indivTourData_3.drop_duplicates('lookup').set_index('lookup')['originTAZ'])
Get tour final destination TAZ for individual trips,step_1,raw,,,,"indivTripData_3['finaldestTAZ'] = np.where(indivTripData_3['outbound'] == True, indivTripData_3['TOURDTAZ'], indivTripData_3['TOUROTAZ'])"
Get distance from trip origin to tour final destination,step_1,skim,indivTripData_3,od_dist,"originTAZ,finaldestTAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
Get distance from trip destination to tour final destination,step_1,skim,indivTripData_3,sd_dist,"destinationTAZ,finaldestTAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
Get out of direction distance,step_1,raw,,,,indivTripData_3['out_dir_dist'] = indivTripData_3['od_distance'] + indivTripData_3['sd_dist'] - indivTripData_3['od_dist']
Add avgDist variable for grouping,step_1,raw,,,,indivTripData_3['avgDist'] = 'avgDist'
Bin out of direction distance,step_1,bin,indivTripData_3,out_dir_distbin,out_dir_dist,[-99999] + list(range(43)) + [99999]
Recode distance bin to maximum,step_1,apply,indivTripData_3,out_dir_distbin,out_dir_distbin,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0]))+1)"
#,,,,,,
Get tour origin TAZ for joint trips,step_1,raw,,,,jointTripData_3['TOUROTAZ'] = jointTripData_3['lookup'].map(jointTourData_3.drop_duplicates('lookup').set_index('lookup')['originTAZ'])
Get tour destination TAZ for joint trips,step_1,raw,,,,jointTripData_3['TOURDTAZ'] = jointTripData_3['lookup'].map(jointTourData_3.drop_duplicates('lookup').set_index('lookup')['destinationTAZ'])
Get tour final destination TAZ for joint trips,step_1,raw,,,,"jointTripData_3['finaldestTAZ'] = np.where(jointTripData_3['outbound'] == True, jointTripData_3['TOURDTAZ'], jointTripData_3['TOUROTAZ'])"
,step_1,skim,jointTripData_3,od_dist,"originTAZ,finaldestTAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
,step_1,skim,jointTripData_3,sd_dist,"destinationTAZ,finaldestTAZ",traffic_skims_MD['MD_SOV_TR_H_DIST']
,step_1,raw,,,,jointTripData_3['out_dir_dist'] = jointTripData_3['od_distance'] + jointTripData_3['sd_dist'] - jointTripData_3['od_dist']
Add avgDist variable for grouping,step_1,raw,,,,jointTripData_3['avgDist'] = 'avgDist'
Bin out of direction distance,step_1,bin,jointTripData_3,out_dir_distbin,out_dir_dist,[-99999] + list(range(43)) + [99999]
Recode distance bin to maximum,step_1,apply,jointTripData_3,out_dir_distbin,out_dir_distbin,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0]))+1)"
#,,,,,,
Add tour participants to joint tour data,step_1,raw,final_joint_tour_participants,,,"tour_participants = (final_joint_tour_participants.groupby([""household_id"", ""tour_id""])[""participant_num""].apply(lambda x: (x.astype(str)+' ').sum().strip()).reset_index())"
Add tour participants to joint tour data,step_1,raw,,tour_participants,,jointTourData_3['tour_participants'] = jointTourData_3['tour_id'].map(tour_participants.set_index('tour_id')['participant_num'])
Add in zeros at end of tour participant string to prevent index error,step_1,apply,jointTourData_3,tour_participants,tour_participants,lambda x: x + (8 - (len(x)+1)//2)*' 0'
Identify person 1 on joint tour,step_1,apply,jointTourData_3,PER1,tour_participants,"lambda x: x.replace(' ', '')[0]"
Identify person 2 on joint tour,step_1,apply,jointTourData_3,PER2,tour_participants,"lambda x: x.replace(' ', '')[1]"
Identify person 3 on joint tour,step_1,apply,jointTourData_3,PER3,tour_participants,"lambda x: x.replace(' ', '')[2]"
Identify person 4 on joint tour,step_1,apply,jointTourData_3,PER4,tour_participants,"lambda x: x.replace(' ', '')[3]"
Identify person 5 on joint tour,step_1,apply,jointTourData_3,PER5,tour_participants,"lambda x: x.replace(' ', '')[4]"
Identify person 6 on joint tour,step_1,apply,jointTourData_3,PER6,tour_participants,"lambda x: x.replace(' ', '')[5]"
Identify person 7 on joint tour,step_1,apply,jointTourData_3,PER7,tour_participants,"lambda x: x.replace(' ', '')[6]"
Identify person 8 on joint tour,step_1,apply,jointTourData_3,PER8,tour_participants,"lambda x: x.replace(' ', '')[7]"
#,,,,,,
Get individual tour person type,step_1,raw,,,,indivTourData_3['PERTYPE'] = (indivTourData_3['household_id'].astype(str) + '-' + indivTourData_3['person_num'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get individual trip person type,step_1,raw,,,,indivTripData_3['PERTYPE'] = (indivTripData_3['household_id'].astype(str) + '-' + indivTripData_3['person_num'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 1,step_1,raw,,,,jointTourData_3['PTYPE1'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER1'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 2,step_1,raw,,,,jointTourData_3['PTYPE2'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER2'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 3,step_1,raw,,,,jointTourData_3['PTYPE3'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER3'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 4,step_1,raw,,,,jointTourData_3['PTYPE4'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER4'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 5,step_1,raw,,,,jointTourData_3['PTYPE5'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER5'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 6,step_1,raw,,,,jointTourData_3['PTYPE6'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER6'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 7,step_1,raw,,,,jointTourData_3['PTYPE7'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER7'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
Get person type for joint tour participant 8,step_1,raw,,,,jointTourData_3['PTYPE8'] = (jointTourData_3['household_id'].astype(str) + '-' + jointTourData_3['PER8'].astype(str)).map(final_persons.set_index('hhper_id')['PERTYPE']).fillna(0)
#,,,,,,
,step_1,raw,,,,toursPertypeDistbn = pd.DataFrame({'freq': indivTourData_3.query('PERTYPE > 0 and TOURPURP != 10')['PERTYPE'].value_counts().sort_index()})
Melt joint tours into tours by person type,step_1,raw,,,,"temp_joint = pd.melt(jointTourData_3, ['household_id', 'tour_id','finalweights'], ['PTYPE1', 'PTYPE2', 'PTYPE3', 'PTYPE4', 'PTYPE5', 'PTYPE6', 'PTYPE7', 'PTYPE8'], value_name = 'PERTYPE')"
Reset temp_joint's index,step_1,raw,,,,temp_joint = temp_joint.drop_duplicates().reset_index()
,step_1,raw,,,,jtoursPertypeDistbn = pd.DataFrame({'freq': temp_joint['PERTYPE'].astype(int).value_counts().sort_index()})
,step_1,raw,,,,totaltoursPertypeDistbn = toursPertypeDistbn.copy()
,step_1,raw,,,,totaltoursPertypeDistbn['freq'] += jtoursPertypeDistbn['freq']
,step_1,raw,,,,totaltoursPertypeDistbn.index.name = 'PERTYPE'
#,,,,,,
Number of non-mandatory tours,step_1,rename,final_persons,inmCounts,,{'num_non_mand': 'inmCounts'}
Number of non-mandatory tours,step_1,cap,final_persons,nmtours,inmCounts,3
Number of non-mandatory tours (rename 3 to 3pl),step_1,replace,final_persons,nmtours,nmtours,"{0: '0', 1: '1', 2: '2', 3: '3+'}"
Reset Individual Tour Index,step_1,raw,indivTourData_3,,,indivTourData_3 = indivTourData_3.drop_duplicates().reset_index()
Reset Joint Tour Index,step_1,raw,jointTourData_3,,,jointTourData_3 = jointTourData_3.drop_duplicates().reset_index()
Reset Individual Trip Index,step_1,raw,indivTourData_3,,,indivTripData_3 = indivTripData_3.drop_duplicates().reset_index()
Reset Joint Trip Index,step_1,raw,jointTourData_3,,,jointTripData_3 = jointTripData_3.drop_duplicates().reset_index()
Recode joint tour composition,step_1,replace,jointTourData_3,tour_composition,composition,"{'adults': 'All Adult', 'children': 'All Children', 'mixed': 'Mixed'}"
Get number in HH on joint tour,step_1,rename,jointTourData_3,,,{'number_of_participants': 'NUMBER_HH_TOTAL'}
Cap NUMBER_HH,step_1,cap,jointTourData_3,NUMBER_HH,NUMBER_HH_TOTAL,5
HH Joint Tours of Purpose 5,step_1,raw,,,,final_households['joint5'] = final_households['household_id'].map(jointTourData_3.query('TOURPURP == 5')['household_id'].value_counts()).fillna(0)
HH Joint Tours of Purpose 6,step_1,raw,,,,final_households['joint6'] = final_households['household_id'].map(jointTourData_3.query('TOURPURP == 6')['household_id'].value_counts()).fillna(0)
HH Joint Tours of Purpose 7,step_1,raw,,,,final_households['joint7'] = final_households['household_id'].map(jointTourData_3.query('TOURPURP == 7')['household_id'].value_counts()).fillna(0)
HH Joint Tours of Purpose 8,step_1,raw,,,,final_households['joint8'] = final_households['household_id'].map(jointTourData_3.query('TOURPURP == 8')['household_id'].value_counts()).fillna(0)
HH Joint Tours of Purpose 9,step_1,raw,,,,final_households['joint9'] = final_households['household_id'].map(jointTourData_3.query('TOURPURP == 9')['household_id'].value_counts()).fillna(0)
Add all joint tours,step_1,sum,final_households,jtours,"joint5,joint6,joint7,joint8,joint9",
Categorize joint tours,step_1,cap,final_households,jointCat,jtours,2
#,,,,,,
Get set of tour ids that are joint tours,step_1,raw,,,,joint_tour_ids = set(final_joint_tour_participants['tour_id'])
Create subset of just joint tours,step_1,raw,,,,"joint_tours = final_tours[['household_id', 'tour_id', 'tour_purpose']].query('tour_id in @joint_tour_ids')"
Group joint tours by household ID and tour purpose,step_1,raw,,,,"joint_tours_by_household_purpose = joint_tours.groupby(['household_id', 'tour_purpose']).count().reset_index().pivot('household_id', 'tour_purpose', 'tour_id').fillna(0).astype(int)"
Get number of joint shopping tours by household,step_1,raw,,,,"final_households['joint_shop'] = np.minimum(final_households['household_id'].map(joint_tours_by_household_purpose['shopping']).fillna(0), 2).astype(int)"
Get number of joint shopping tours by household,step_1,raw,,,,"final_households['joint_main'] = np.minimum(final_households['household_id'].map(joint_tours_by_household_purpose['othmaint']).fillna(0), 2).astype(int)"
Get number of joint shopping tours by household,step_1,raw,,,,"final_households['joint_eat'] = np.minimum(final_households['household_id'].map(joint_tours_by_household_purpose['eatout']).fillna(0), 2).astype(int)"
Get number of joint shopping tours by household,step_1,raw,,,,"final_households['joint_visit'] = np.minimum(final_households['household_id'].map(joint_tours_by_household_purpose['social']).fillna(0), 2).astype(int)"
Get number of joint shopping tours by household,step_1,raw,,,,"final_households['joint_disc'] = np.minimum(final_households['household_id'].map(joint_tours_by_household_purpose['othdiscr']).fillna(0), 2).astype(int)"
#,,,,,,
Initialize joint_tour_frequency column in final_households with no joint tours,step_1,raw,,,,final_households['joint_tour_frequency'] = '0_tours'
Recode if one joint shopping tour was made,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_shop'] == 1, '1_Shop', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_main'] == 1, '1_Main', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_eat'] == 1, '1_Eat', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_visit'] == 1, '1_Visit', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_disc'] == 1, '1_Disc', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_shop'] == 2, '2_SS', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_shop'] == 1) & (final_households['joint_main'] == 1), '2_SM', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_shop'] == 1) & (final_households['joint_eat'] == 1), '2_SE', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_shop'] == 1) & (final_households['joint_visit'] == 1), '2_SV', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_shop'] == 1) & (final_households['joint_disc'] == 1), '2_SD', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_main'] == 2, '2_MM', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_main'] == 1) & (final_households['joint_eat'] == 1), '2_ME', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_main'] == 1) & (final_households['joint_visit'] == 1), '2_MV', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_main'] == 1) & (final_households['joint_disc'] == 1), '2_MD', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_eat'] == 2, '2_EE', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_eat'] == 1) & (final_households['joint_visit'] == 1), '2_EV', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_eat'] == 1) & (final_households['joint_disc'] == 1), '2_ED', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_visit'] == 2, '2_VV', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where((final_households['joint_visit'] == 1) & (final_households['joint_disc'] == 1), '2_VD', final_households['joint_tour_frequency'])"
,step_1,raw,,,,"final_households['joint_tour_frequency'] = np.where(final_households['joint_disc'] == 2, '2_DD', final_households['joint_tour_frequency'])"
Rename joint tour categories,step_1,replace,final_households,alt_name,joint_tour_frequency,"{'0_tours': 'No Joint Tours', '1_Shop': '1 Shopping', '1_Main': '1 Maintenance', '1_Eat': '1 Eating Out', '1_Visit': '1 Visiting', '1_Disc': '1 Other Discretionary', '2_SS': '2 Shopping', '2_SM': '1 Shopping / 1 Maintenance', '2_SE': '1 Shopping / 1 Eating Out', '2_SV': '1 Shopping / 1 Visiting', '2_SD': '1 Shopping / 1 Other Discretionary', '2_MM': '2 Maintenance', '2_ME': '1 Maintenance / 1 Eating Out', '2_MV': '1 Maintenance / 1 Visiting', '2_MD': '1 Maintenance / 1 Other Discretionary', '2_EE': '2 Eating Out', '2_EV': '1 Eating Out / 1 Visiting', '2_ED': '1 Eating Out / 1 Other Discretionary', '2_VV': '2 Visiting', '2_VD': '1 Visiting / 1 Other Discretionary', '2_DD': '2 Other Discretionary'}"
Add jtf,step_1,replace,final_households,jtf,joint_tour_frequency,"{'0_tours': 1, '1_Shop': 2, '1_Main': 3, '1_Eat': 4, '1_Visit': 5, '1_Disc': 6, '2_SS': 7, '2_SM': 8, '2_SE': 9, '2_SV': 10, '2_SD': 11, '2_MM': 12, '2_ME': 13, '2_MV': 14, '2_MD': 15, '2_EE': 16, '2_EV': 17, '2_ED': 18, '2_VV': 19, '2_VD': 20, '2_DD': 21}"
#,,,,,,
Add number of total stops for individual tours,step_1,raw,,,,indivTourData_3['num_tot_stops'] = indivTourData_3['num_ib_stops'] + indivTourData_3['num_ob_stops']
Add number of total stops for joint tours,step_1,raw,,,,jointTourData_3['num_tot_stops'] = jointTourData_3['num_ib_stops'] + jointTourData_3['num_ob_stops']
Add variable indicating if next stop is on inbound tour leg to individual trip data,step_1,raw,,,,indivTripData_3['inb_next'] = np.zeros_like(indivTripData_3.index)
Add variable indicating if next stop is on inbound tour leg to individual trip data,step_1,raw,,,,indivTripData_3['inb_next'].iloc[:indivTripData_3.shape[0]-1] = indivTripData_3['inbound'][1:]
Add variable indicating if individual trip is intermediate stop on tour,step_1,raw,,,,"indivTripData_3['stops'] = np.where((indivTripData_3['DPURP'] > 0) & (((indivTripData_3['inbound'] == 0) & (indivTripData_3['inb_next'] == 0)) | ((indivTripData_3['inbound'] == 1) & (indivTripData_3['inb_next'] == 1))), 1, 0)"
Add variable indicating if next stop is on inbound tour leg to joint trip data,step_1,raw,,,,jointTripData_3['inb_next'] = np.zeros_like(jointTripData_3.index)
Add variable indicating if next stop is on inbound tour leg to joint trip data,step_1,raw,,,,jointTripData_3['inb_next'].iloc[:jointTripData_3.shape[0]-1] = jointTripData_3['inbound'][1:]
Add variable indicating if joint trip is intermediate stop on tour,step_1,raw,,,,"jointTripData_3['stops'] = np.where((jointTripData_3['DPURP'] > 0) & (((jointTripData_3['inbound'] == 0) & (jointTripData_3['inb_next'] == 0)) | ((jointTripData_3['inbound'] == 1) & (jointTripData_3['inb_next'] == 1))), 1, 0)"
Classify number of adults,step_1,rename,final_households,,,{'num_adults': 'ADULTS'}
#,,,,,,
Classify vehicle ownership category for individual tours,step_3,raw,hh_itours,,,"hh_itours['AUTOSUFF'] = np.where(hh_itours['HHVEH'] == 0, 0, np.where(hh_itours['HHVEH'] < hh_itours['ADULTS'], 1, 2))"
Classify vehicle ownership category for joint tours,step_3,raw,hh_jtours,,,"hh_jtours['AUTOSUFF'] = np.where(hh_jtours['HHVEH'] == 0, 0, np.where(hh_jtours['HHVEH'] < hh_jtours['ADULTS'], 1, 2))"
#,,,,,,
Get tours with active workers,step_3,raw,,,,"active_workers = indivTourData_3[['tour_purpose', 'person_type', 'household_id', 'person_num']].query('tour_purpose == ""work"" and person_type in [1, 2]').groupby(['household_id', 'person_num']).max()['person_type'].reset_index()"
Get tours with active students,step_3,raw,,,,"active_students = indivTourData_3[['tour_purpose', 'person_type', 'household_id', 'person_num']].query('tour_purpose == ""school"" and person_type in [6, 7, 8]').groupby(['household_id', 'person_num']).max()['person_type'].reset_index()"
Get tours with active students,step_3,raw,,,,active_students['active_student'] = np.ones_like(active_students.index)
Group active student tours by household,step_3,raw,,,,hh_active_student = active_students.groupby('household_id').max()['active_student']
Tag active workers with active students in household,step_3,raw,,,,active_workers['active_student'] = active_workers['household_id'].map(hh_active_student).fillna(0)
Fill null values with 0,step_3,raw,,,,active_workers = active_workers.fillna(0)
Reset active_workers index,step_3,raw,,,,active_workers = active_workers.reset_index()
#,,,,,,
Add up total population,step_3,raw,,,,total_population = final_persons.finalweights.sum()
Add up total households,step_3,raw,,,,total_households = final_households.finalweights.sum()
Add up total tours,step_3,raw,,,,total_tours = indivTourData_3.finalweights.sum() + (jointTourData_3['NUMBER_HH_TOTAL']*jointTourData_3['finalweights']).sum()
Add up total trips,step_3,raw,,,,total_trips = indivTripData_3.finalweights.sum() + jointTripData_3.finalweights.sum()
Add up total stops,step_3,raw,,,,total_stops = indivTripData_3.query('stops == 1').finalweights.sum() + jointTripData_3.query('stops == 1').finalweights.sum()
Add up total VMT,step_3,raw,indivTripData_3,num_travel,trip_mode,"indivTripData_3['num_travel'] = indivTripData_3['trip_mode'].map({'DRIVEALONE': 1, 'SHARED2': 2, 'SHARED3': 3.5, 'TAXI': 1.1, 'TNC_SINGLE': 1.2, 'TNC_SHARED': 2}).fillna(0)"
Add up total VMT,step_3,raw,,,,"indivTripData_3['vmt'] = np.where(indivTripData_3['num_travel'].astype(int) > 0, indivTripData_3['od_distance'] / indivTripData_3['num_travel'] *indivTripData_3['finalweights']  , 0)"
Add up total VMT,step_3,raw,,,,total_vmt = indivTripData_3['vmt'].sum()
Get totals together into series,step_3,raw,,,,"totals_df = pd.Series([total_population, total_households, total_tours, total_trips, total_stops, total_vmt], [""Population"", ""Households"", ""Tours"", ""Trips"", ""Stops"", ""VMT""])"
Name totals column,step_3,raw,,,,totals_df = pd.DataFrame({'value': totals_df})
Name totals index,step_3,raw,,,,totals_df.index.name = 'Variable'
Write totals data frame,step_3,raw,,,,totals_df.to_csv(r'output\totals.csv')
#,,,,,,
Create rates data frame,step_3,raw,,,,"rates_df = pd.Series([totals_df['value']['Tours']/totals_df['value']['Population'], totals_df['value']['Trips']/totals_df['value']['Population'], totals_df['value']['Stops']/totals_df['value']['Population'], totals_df['value']['Trips']/totals_df['value']['Households']], ['Tours per Person', 'Trips per Person', 'Stops per Person', 'Trips per Household'])"
Create rates data frame,step_3,raw,,,,rates_df = pd.DataFrame({'value': rates_df})
Create rates data frame,step_3,raw,,,,rates_df.index.name = 'Variable'
Write rates data frame,step_3,raw,,,,rates_df.to_csv(r'output\rates.csv')
#,,,,,,
#,,,,,,
Add totals to average mandatory trip length,step_6,raw,,,,mandTripLengthsTotal['HDISTRICT'] = 'Total'
Add totals to average mandatory trip length,step_6,raw,,,,"mandTripLengths = pd.concat((mandTripLengths, mandTripLengthsTotal))"
Add totals to average mandatory trip length,step_6,raw,,,,mandTripLengthsTotal_et['HDISTRICT'] = 'Total'
Add totals to average mandatory trip length,step_6,raw,,,,"mandTripLengths_et = pd.concat((mandTripLengths_et, mandTripLengthsTotal_et))"
Add totals to results by person type,step_6,raw,,,,resultsByPTypeTotal['index'] = 'Total'
Add totals to results by person type,step_6,raw,,,,"resultsByPType = pd.concat((resultsByPType, resultsByPTypeTotal))"
Add total non mandatory trip length,step_6,raw,,,,"nonMandTripLengths.loc[nonMandTripLengths.index.max()+1] = ['Total', nonMandTripLengthsTotal.loc[0, 'avgDist']]"
Add total non mandatory trip length,step_6,raw,,,,"nonMandTripLengths_et.loc[nonMandTripLengths_et.index.max()+1] = ['Total', nonMandTripLengthsTotal_et.loc[0, 'avgDist']]"
Add total out of direction distance,step_6,raw,,,,"avgStopOutofDirectionDist_vis.loc[avgStopOutofDirectionDist_vis.index.max()+1] = ['Total', avgStopOutofDirectionDistTotal.loc[0, 'avgDist']]"
#,,,,,,
Rename HDISTRICT to just District,step_6,rename,wfh_summary,,,{'HDISTRICT': 'District'}
Add totals to work from home summary,step_6,raw,,,,"wfh_summary.loc[wfh_summary.index.max()+1] = ['Total', wfh_summary['Workers'].sum(), wfh_summary['WFH'].sum()]"
Get % Work From Home,step_6,column,wfh_summary,%WFH,,WFH/Workers
Add up individual and joint tours by person type,step_6,sum,resultsByPType,tours,"itours,jtours",
Get tour rate,step_6,column,resultsByPType,tour_rate,,tours/active_persons
#,,,,,,
Normalize Escorting Tour Rates,step_6,column,nm_tour_rates,Escorting,,Escorting/TotalPersons
Normalize Shopping Tour Rates,step_6,column,nm_tour_rates,Shopping,,Shopping/TotalPersons
Normalize Maintenance Tour Rates,step_6,column,nm_tour_rates,Maintenance,,Maintenance/TotalPersons
Normazlize Eating Out Tour Rates,step_6,column,nm_tour_rates,EatingOut,,EatingOut/TotalPersons
Normalize Visiting Tour Rates,step_6,column,nm_tour_rates,Visiting,,Visiting/TotalPersons
Normalize Discretionary Tour Rates,step_6,column,nm_tour_rates,Discretionary,,Discretionary/TotalPersons
Normalize All Nonmandatory Tour Rates,step_6,column,nm_tour_rates,All,,All/TotalPersons
Delete total persons column,step_6,raw,,,,del nm_tour_rates['TotalPersons']
Melt nm_tour_rates,step_6,raw,,,,"nm_tour_rates = pd.melt(nm_tour_rates, ['PERTYPE'], var_name = 'tour_purp', value_name = 'tour_rate')"
#,,,,,,
Rename person type column,step_6,rename,resultsByPType,,,{'index': 'PERTYPE'}
Rename person type column,step_6,rename,tours_pertype_purpose,,,{'person_type': 'PERTYPE'}
#,,,,,,
Recode person type,step_6,replace,inmSummary_vis,PERTYPE,PERTYPE,"{1: '1: Full-Time Worker', 2: '2: Part-Time Worker', 3: '3: University Student', 4: '4: Non-Worker', 5: '5: Retiree', 6: '6: Driving Aged Student', 7: '7: Non-Driving Aged Student', 8: '8: Child To Young for School'}"
Recode person type,step_6,replace,tours_pertype_purpose,PERTYPE,PERTYPE,"{1: '1: Full-Time Worker', 2: '2: Part-Time Worker', 3: '3: University Student', 4: '4: Non-Worker', 5: '5: Retiree', 6: '6: Driving Aged Student', 7: '7: Non-Driving Aged Student', 8: '8: Child To Young for School'}"
Recode person type,step_6,replace,resultsByPType,PERTYPE,PERTYPE,"{1: '1: Full-Time Worker', 2: '2: Part-Time Worker', 3: '3: University Student', 4: '4: Non-Worker', 5: '5: Retiree', 6: '6: Driving Aged Student', 7: '7: Non-Driving Aged Student', 8: '8: Child To Young for School'}"
Recode person type,step_6,replace,pertypeDistbn,PERTYPE,PERTYPE,"{1: '1: Full-Time Worker', 2: '2: Part-Time Worker', 3: '3: University Student', 4: '4: Non-Worker', 5: '5: Retiree', 6: '6: Driving Aged Student', 7: '7: Non-Driving Aged Student', 8: '8: Child To Young for School'}"
Recode person type,step_6,replace,dapSummary_vis,PERTYPE,PERTYPE,"{1: '1: Full-Time Worker', 2: '2: Part-Time Worker', 3: '3: University Student', 4: '4: Non-Worker', 5: '5: Retiree', 6: '6: Driving Aged Student', 7: '7: Non-Driving Aged Student', 8: '8: Child To Young for School'}"
Recode person type,step_6,replace,mtfSummary_vis,PERTYPE,PERTYPE,"{1: '1: Full-Time Worker', 2: '2: Part-Time Worker', 3: '3: University Student', 4: '4: Non-Worker', 5: '5: Retiree', 6: '6: Driving Aged Student', 7: '7: Non-Driving Aged Student', 8: '8: Child To Young for School'}"
Recode person type,step_6,replace,nm_tour_rates,PERTYPE,PERTYPE,"{1: '1: Full-Time Worker', 2: '2: Part-Time Worker', 3: '3: University Student', 4: '4: Non-Worker', 5: '5: Retiree', 6: '6: Driving Aged Student', 7: '7: Non-Driving Aged Student', 8: '8: Child To Young for School'}"
#,,,,,,
Rename AGGPURP,step_6,rename,stopDC_vis,,,"{'AGGPURP': 'purpose', 'out_dir_distbin': 'distbin'}"
Rename AGGPURP,step_6,rename,avgStopOutofDirectionDist_vis,,,{'AGGPURP': 'purpose'}
Rename AGGPURP,step_6,rename,tmodeProfile_vis,,,{'AGGPURP': 'purpose'}
Rename AGGPURP,step_6,rename,tourDistProfile_vis,,,"{'AGGPURP': 'purpose', 'tourdistbin': 'distbin'}"
Rename AGGPURP,step_6,rename,tourDistProfile_et_vis,,,"{'AGGPURP': 'purpose', 'tourdistbin': 'distbin'}"
Rename AGGPURP,step_6,rename,tripmodeProfile_vis,,,{'AGGPURP': 'purpose'}
Rename AGGPURP,step_6,rename,nonMandTripLengths,,,{'AGGPURP': 'purpose'}
Rename AGGPURP,step_6,rename,nonMandTripLengths_et,,,{'AGGPURP': 'purpose'}
Rename AGGPURP,step_6,rename,stopDeparture_vis,,,{'AGGPURP': 'purpose'}
Rename AGGPURP,step_6,rename,stopFreqProfile_vis,,,"{'AGGPURP': 'purpose', 'level_0': 'num_stops'}"
Rename AGGPURP,step_6,rename,stopPurposeByTourPurpose_vis,,,"{'AGGPURP': 'tour_purpose', 'DPURP': 'stop_purpose'}"
Rename AGGPURP,step_6,rename,todProfile_vis,,,"{'AGGPURP': 'purpose', 'level_0': 'period'}"
Rename AGGPURP,step_6,rename,tripDeparture_vis,,,{'AGGPURP': 'tour_purpose'}
Rename AGGPURP,step_6,rename,tourDuration,,,{'AGGPURP': 'purpose'}
#,,,,,,
Rename AUTOSUFF column,step_6,rename,tmodeProfile_vis,,,{'AUTOSUFF': 'OwnershipCategory'}
Recode auto ownership category,step_6,replace,tmodeProfile_vis,OwnershipCategory,OwnershipCategory,"{0: '0: No Vehicles', 1: '1: 1+ Veh/Adults > Veh', 2: '2: Vehicles >= Adults'}"
Rename mandatory distance distribution columns,step_6,rename,mandTLFD,,,"{'level_0': 'distbin', 'HDISTRICT': 'District'}"
Rename mandatory distance distribution columns,step_6,rename,mandTLFD_et,,,"{'level_0': 'distbin', 'HDISTRICT': 'District'}"
Recode tour mode,step_6,replace,tmodeProfile_vis,tour_mode,tour_mode,"{'DRIVEALONE': '01: SOV', 'SHARED2': '02: Shared Ride 2', 'SHARED3': '03: Shared Ride 3+', 'WALK': '04: Walk', 'BIKE': '05: Bike', 'WALK_TRANSIT': '06: Walk to Transit', 'WALK_LOC': '06: Walk to Transit', 'WALK_PRM': '06: Walk to Transit', 'WALK_MIX': '06: Walk to Transit', 'PNR_TRANSIT': '07: PNR to Transit', 'PNR_LOC': '07: PNR to Transit', 'PNR_PRM': '07: PNR to Transit', 'PNR_MIX': '07: PNR to Transit', 'KNR_TRANSIT': '08: KNR to Transit', 'KNR_LOC': '08: KNR to Transit', 'KNR_PRM': '08: KNR to Transit', 'KNR_MIX': '08: KNR to Transit', 'TNC_TRANSIT': '09: TNC to Transit', 'TNC_LOC': '09: TNC to Transit', 'TNC_PRM': '09: TNC to Transit', 'TNC_MIX': '09: TNC to Transit', 'TAXI': '10: Taxi', 'TNC_SINGLE': '11: TNC Single', 'TNC_SHARED': '12: TNC Shared', 'SCH_BUS': '13: School Bus'}"
Recode tour mode,step_6,replace,tripmodeProfile_vis,tour_mode,tour_mode,"{'DRIVEALONE': '01: SOV', 'SHARED2': '02: Shared Ride 2', 'SHARED3': '03: Shared Ride 3+', 'WALK': '04: Walk', 'BIKE': '05: Bike', 'WALK_TRANSIT': '06: Walk to Transit', 'WALK_LOC': '06: Walk to Transit', 'WALK_PRM': '06: Walk to Transit', 'WALK_MIX': '06: Walk to Transit', 'PNR_TRANSIT': '07: PNR to Transit', 'PNR_LOC': '07: PNR to Transit', 'PNR_PRM': '07: PNR to Transit', 'PNR_MIX': '07: PNR to Transit', 'KNR_TRANSIT': '08: KNR to Transit', 'KNR_LOC': '08: KNR to Transit', 'KNR_PRM': '08: KNR to Transit', 'KNR_MIX': '08: KNR to Transit', 'TNC_TRANSIT': '09: TNC to Transit', 'TNC_LOC': '09: TNC to Transit', 'TNC_PRM': '09: TNC to Transit', 'TNC_MIX': '09: TNC to Transit', 'TAXI': '10: Taxi', 'TNC_SINGLE': '11: TNC Single', 'TNC_SHARED': '12: TNC Shared', 'SCH_BUS': '13: School Bus'}"
Recode trip mode,step_6,replace,tripmodeProfile_vis,trip_mode,trip_mode,"{'DRIVEALONE': '01: SOV', 'SHARED2': '02: Shared Ride 2', 'SHARED3': '03: Shared Ride 3+', 'WALK': '04: Walk', 'BIKE': '05: Bike', 'WALK_TRANSIT': '06: Walk to Transit', 'WALK_LOC': '06: Walk to Transit', 'WALK_PRM': '06: Walk to Transit', 'WALK_MIX': '06: Walk to Transit', 'PNR_TRANSIT': '07: PNR to Transit', 'PNR_LOC': '07: PNR to Transit', 'PNR_PRM': '07: PNR to Transit', 'PNR_MIX': '07: PNR to Transit', 'KNR_TRANSIT': '08: KNR to Transit', 'KNR_LOC': '08: KNR to Transit', 'KNR_PRM': '08: KNR to Transit', 'KNR_MIX': '08: KNR to Transit', 'TNC_TRANSIT': '09: TNC to Transit', 'TNC_LOC': '09: TNC to Transit', 'TNC_PRM': '09: TNC to Transit', 'TNC_MIX': '09: TNC to Transit', 'TAXI': '10: Taxi', 'TNC_SINGLE': '11: TNC Single', 'TNC_SHARED': '12: TNC Shared', 'SCH_BUS': '13: School Bus'}"
Drop null values,step_6,raw,,,,tmodeProfile_vis = tmodeProfile_vis.dropna()
Melt mand TLFD,step_6,raw,,,,"mandTLFD = pd.melt(mandTLFD, ['distbin', 'District'], var_name = 'purpose')"
Melt mand TLFD,step_6,raw,,,,"mandTLFD_et = pd.melt(mandTLFD_et, ['distbin', 'District'], var_name = 'purpose')"
Rename mandatory trip length district,step_6,rename,mandTripLengths,,,{'HDISTRICT': 'District'}
Rename mandatory trip length district,step_6,rename,mandTripLengths_et,,,{'HDISTRICT': 'District'}
Melt mandatory trip lengths,step_6,raw,,,,"mandTripLengths = pd.melt(mandTripLengths, ['District'], var_name = 'purpose')"
Melt mandatory trip lengths,step_6,raw,,,,"mandTripLengths_et = pd.melt(mandTripLengths_et, ['District'], var_name = 'purpose')"
Recode mandatory tour frequency category,step_6,replace,mtfSummary_vis,imf_choice,imf_choice,"{0: ""No Mand Tours"", 1: ""1 Work"", 2: ""2+ Work"", 3: ""1 School"", 4: ""2+ School"", 5: ""1 Work & 1 School""}"
Melt stopFreqProfile_vis,step_6,raw,,,,"stopFreqProfile_vis = pd.melt(stopFreqProfile_vis, ['num_stops', 'purpose'], var_name = 'Direction')"
Recode stop purpose,step_6,replace,stopPurposeByTourPurpose_vis,stop_purpose,stop_purpose,"{1: '01: Work', 2: '02: University', 3: '03: School', 4: '04: Escort', 5: '05: Shopping', 6: '06: Maintenance', 7: '07: Eating', 8: '08: Visiting', 9: '09: Other Discretionary', 10: '10: Work-Related'}"
#,,,,,,
Recode HH District,step_6,replace,wfh_summary,District,District,"{1: '1: Downtown', 2: '2: Central', 3: '3: North City', 4: '4: South Suburban', 5: '5: East Suburban', 6: '6: North County West', 7: '7: North County East', 8: '8: East County'}"
Recode HH District,step_6,replace,districtFlows,HDISTRICT,HDISTRICT,"{1: '1: Downtown', 2: '2: Central', 3: '3: North City', 4: '4: South Suburban', 5: '5: East Suburban', 6: '6: North County West', 7: '7: North County East', 8: '8: East County'}"
Recode Work District,step_6,replace,districtFlows,WDISTRICT,WDISTRICT,"{1: '1: Downtown', 2: '2: Central', 3: '3: North City', 4: '4: South Suburban', 5: '5: East Suburban', 6: '6: North County West', 7: '7: North County East', 8: '8: East County'}"
Recode mandatory tour length district,step_6,replace,mandTLFD,District,District,"{1: '1: Downtown', 2: '2: Central', 3: '3: North City', 4: '4: South Suburban', 5: '5: East Suburban', 6: '6: North County West', 7: '7: North County East', 8: '8: East County'}"
Recode mandatory tour length district,step_6,replace,mandTripLengths,District,District,"{1: '1: Downtown', 2: '2: Central', 3: '3: North City', 4: '4: South Suburban', 5: '5: East Suburban', 6: '6: North County West', 7: '7: North County East', 8: '8: East County'}"
Recode mandatory tour length district,step_6,replace,mandTLFD_et,District,District,"{1: '1: Downtown', 2: '2: Central', 3: '3: North City', 4: '4: South Suburban', 5: '5: East Suburban', 6: '6: North County West', 7: '7: North County East', 8: '8: East County'}"
Recode mandatory tour length district,step_6,replace,mandTripLengths_et,District,District,"{1: '1: Downtown', 2: '2: Central', 3: '3: North City', 4: '4: South Suburban', 5: '5: East Suburban', 6: '6: North County West', 7: '7: North County East', 8: '8: East County'}"
#,,,,,,
Recode time period,step_6,apply,todProfile_vis,period,period,lambda x: (0.5*x+2.75) % 24
Recode time period,step_6,apply,tripDeparture_vis,stop_period,depart,lambda x: (0.5*x+2.75) % 24
Recode time period,step_6,apply,stopDeparture_vis,stop_period,depart,lambda x: (0.5*x+2.75) % 24
Recode tour duration,step_6,apply,tourDuration,tourdur,tourdur,lambda x: 0.5*x
#,,,,,,
Recode daily activity pattern,step_6,replace,dapSummary_vis,activity_pattern,activity_pattern,"{'H': 'Home', 'M': 'Mandatory', 'N': 'Non-Mandatory'}"
#,,,,,,
,step_6,apply,todProfile_vis,period,period,lambda x: ((x-3)%24)+3
,step_6,apply,stopDeparture_vis,stop_period,stop_period,lambda x: ((x-3)%24)+3
,step_6,apply,tripDeparture_vis,stop_period,stop_period,lambda x: ((x-3)%24)+3
#,,,,,,
Bin tour TOD profile into assignment time periods,step_6,bin,todProfile_vis,skim_period,period,"[3, 6, 9, 15.5, 19, 27]"
Bin tour TOD profile into assignment time periods,step_6,apply,todProfile_vis,skim_period,skim_period,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0])))"
Bin tour TOD profile into assignment time periods,step_6,replace,todProfile_vis,skim_period,skim_period,"{6: '1: EA', 9: '2: AM', 15: '3: MD', 19: '4: PM', 27: '5: EV'}"
Bin stop TOD profile into assignment time periods,step_6,bin,stopDeparture_vis,stop_skim_period,stop_period,"[3, 6, 9, 15.5, 19, 27]"
Bin stop TOD profile into assignment time periods,step_6,apply,stopDeparture_vis,stop_skim_period,stop_skim_period,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0])))"
Bin stop TOD profile into assignment time periods,step_6,replace,stopDeparture_vis,stop_skim_period,stop_skim_period,"{6: '1: EA', 9: '2: AM', 15: '3: MD', 19: '4: PM', 27: '5: EV'}"
Bin trip TOD profile into assignment time periods,step_6,bin,tripDeparture_vis,stop_skim_period,stop_period,"[3, 6, 9, 15.5, 19, 27]"
Bin trip TOD profile into assignment time periods,step_6,apply,tripDeparture_vis,stop_skim_period,stop_skim_period,"(lambda x: int(float(str(x).split(', ')[1].split(']')[0])))"
Bin trip TOD profile into assignment time periods,step_6,replace,tripDeparture_vis,stop_skim_period,stop_skim_period,"{6: '1: EA', 9: '2: AM', 15: '3: MD', 19: '4: PM', 27: '5: EV'}"
#,,,,,,
Remove column depart from stopDeparture_vis,step_6,raw,,,,del stopDeparture_vis['depart']
Remove column depart from tripDeparture_vis,step_6,raw,,,,del tripDeparture_vis['depart']
