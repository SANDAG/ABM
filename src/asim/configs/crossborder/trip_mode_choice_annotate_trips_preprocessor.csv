Description,Target,Expression
,is_work_tour,df.tour_type == 'work'
,work_time_factor,"rng.lognormal_for_df(df.set_index('tour_id'), mu=time_distrib_mean_work, sigma=time_distrib_stddev_work, broadcast=True, scale=True).set_axis(df.index, axis='index')"
,non_work_time_factor,"rng.lognormal_for_df(df.set_index('tour_id'), mu=time_distrib_mean_nonwork, sigma=time_distrib_stddev_nonwork, broadcast=True, scale=True).set_axis(df.index, axis='index')"
,c_ivt,c_ivt_base * (is_work_tour * work_time_factor + (1 - is_work_tour) * non_work_time_factor)
#,c_fwt,c_ivt * 1.5
#,c_xwt,c_ivt * 1.5
,c_wacc,c_ivt * 1.5
,c_wegr,c_ivt * 1.5
#,c_waux,c_ivt * 1.5
,c_xfers,c_ivt * 24
,c_walk_time,c_ivt * 1.8
,c_xfers_pnr,c_ivt * 15
# Transit ASCs,,
commuter rail ASC,asc_cr_mix,"np.where(odt_skims['WALK_MIX_CMRIVTT'] > 0, cr_asc * c_ivt, 0)"
light rail ASC,asc_lrt_mix,"np.where(asc_cr_mix==0, np.where(odt_skims['WALK_MIX_LRTIVTT'] > 0, lrt_asc * c_ivt, 0), asc_cr_mix)"
bus rapid transit ASC,asc_brt_mix,"np.where(asc_lrt_mix==0, np.where(odt_skims['WALK_MIX_BRTIVTT'] > 0, brt_asc * c_ivt, 0), asc_lrt_mix)"
express bus ASC,asc_eb_mix,"np.where(asc_brt_mix==0, np.where(odt_skims['WALK_MIX_LTDEXPIVTT'] + odt_skims['WALK_MIX_EXPIVTT'] > 0, exp_asc * c_ivt, 0), asc_brt_mix)"
commuter rail ASC,asc_cr_prm,"np.where(odt_skims['WALK_PRM_CMRIVTT'] > 0, cr_asc * c_ivt, 0)"
light rail ASC,asc_lrt_prm,"np.where(asc_cr_prm==0, np.where(odt_skims['WALK_PRM_LRTIVTT'] > 0, lrt_asc * c_ivt, 0), asc_cr_prm)"
bus rapid transit ASC,asc_brt_prm,"np.where(asc_lrt_prm==0, np.where(odt_skims['WALK_PRM_BRTIVTT'] > 0, brt_asc * c_ivt, 0), asc_lrt_prm)"
express bus ASC,asc_eb_prm,"np.where(asc_brt_prm==0, np.where(odt_skims['WALK_PRM_LTDEXPIVTT'] + odt_skims['WALK_PRM_EXPIVTT'] > 0, exp_asc * c_ivt, 0), asc_brt_prm)"
#,,
,cost_per_mile,costPerMile
intermediate outbound stops on tour,out_stops,df['stop_frequency'].str[0].astype(int)
intermediate inbound stops on tour,in_stops,df['stop_frequency'].str[5].astype(int)
total intermediate stops,tot_stops,out_stops + in_stops
,tot_trips,tot_stops + 2
first trip of tour,first_trip,(df.trip_num == 1) & (df.outbound == True)
last trip of tour,last_trip,(df.trip_num == df.trip_count) & (df.outbound == False)
,first_of_multi_trips,(out_stops > 0) & first_trip
,last_of_multi_trips,(in_stops > 0) & last_trip
,tour_mode_is_da,df.tour_mode == 'DRIVEALONE'
,tour_mode_is_s2,df.tour_mode == 'SHARED2'
,tour_mode_is_s3,df.tour_mode == 'SHARED3'
,tour_mode_is_walk,df.tour_mode == 'WALK'
tour duration in hours,duration_hours,df['duration'] / PERIODS_PER_HOUR
,_TOURS_HAVE_DEST,'destination' in tours.columns
for tour_od_choice logsums read tour_dest from trips table,tour_dest,"reindex(tours.destination, df.tour_id) if _TOURS_HAVE_DEST else df.tour_destination"
,trip_orig_is_tour_dest,df.origin == tour_dest
,trip_dest_is_tour_dest,df.destination == tour_dest
sandag costs need to be in cents,park_cost_day,"reindex(land_use.exp_daily, tour_dest) * 100"
,park_cost_hour,"reindex(land_use.exp_hourly, tour_dest) * 100"
,park_cost_month,"reindex(land_use.exp_monthly, tour_dest) * 100"
effective parking cost,park_cost_prim_dest,"pd.concat((park_cost_day, park_cost_hour * duration_hours), axis=1).min(axis=1)"
,park_cost_tour_dest_contrib,park_cost_prim_dest / tot_trips
,park_cost_trip_orig,"reindex(land_use.exp_hourly, df[ORIGIN]) * 100"
,park_cost_trip_dest,"reindex(land_use.exp_hourly, df[DESTINATION]) * 100"
,park_cost_trip_orig_contrib,((1 - first_trip) * (1 - trip_orig_is_tour_dest)) * (park_cost_trip_orig / 2) + (trip_orig_is_tour_dest * (park_cost_tour_dest_contrib / (tot_trips + 2)))
,park_cost_trip_dest_contrib,((1 - last_trip) * (1 - trip_dest_is_tour_dest)) * (park_cost_trip_dest / 2) + (trip_dest_is_tour_dest * (park_cost_tour_dest_contrib / (tot_trips + 2)))
,parking_cost,park_cost_tour_dest_contrib + park_cost_trip_orig_contrib + park_cost_trip_dest_contrib
,vot_da,c_ivt / c_cost * 0.6
,vot_s2,vot_da / cost_share_s2
,vot_s3,vot_da / cost_share_s3
,_vot_bin_da,"np.where(vot_da < vot_threshold_low, 1, np.where(vot_da < vot_threshold_med, 2, 3))"
,_vot_bin_s2,"np.where(vot_s2 < vot_threshold_low, 1, np.where(vot_s2 < vot_threshold_med, 2, 3))"
,_vot_bin_s3,"np.where(vot_s3 < vot_threshold_low, 1, np.where(vot_s3 < vot_threshold_med, 2, 3))"
vot-indexed skims,da_dist_skims,((odt_skims['SOV_NT_L_DIST'] * (_vot_bin_da == 1)) + (odt_skims['SOV_NT_M_DIST'] * (_vot_bin_da == 2)) + (odt_skims['SOV_NT_H_DIST'] * (_vot_bin_da == 3)))
,da_cost_skims,((odt_skims['SOV_NT_L_TOLLCOST'] * (_vot_bin_da == 1)) + (odt_skims['SOV_NT_M_TOLLCOST'] * (_vot_bin_da == 2)) + (odt_skims['SOV_NT_H_TOLLCOST'] * (_vot_bin_da == 3)))
,da_time_skims,((odt_skims['SOV_NT_L_TIME'] * (_vot_bin_da == 1)) + (odt_skims['SOV_NT_M_TIME'] * (_vot_bin_da == 2)) + (odt_skims['SOV_NT_H_TIME'] * (_vot_bin_da == 3)))
,s2_dist_skims,((odt_skims['HOV2_L_DIST'] * (_vot_bin_s2 == 1)) + (odt_skims['HOV2_M_DIST'] * (_vot_bin_s2 == 2)) + (odt_skims['HOV2_H_DIST'] * (_vot_bin_s2 == 3)))
,s2_cost_skims,((odt_skims['HOV2_L_TOLLCOST'] * (_vot_bin_s2 == 1)) + (odt_skims['HOV2_M_TOLLCOST'] * (_vot_bin_s2 == 2)) + (odt_skims['HOV2_H_TOLLCOST'] * (_vot_bin_s2 == 3)))
,s2_time_skims,((odt_skims['HOV2_L_TIME'] * (_vot_bin_s2 == 1)) + (odt_skims['HOV2_M_TIME'] * (_vot_bin_s2 == 2)) + (odt_skims['HOV2_H_TIME'] * (_vot_bin_s2 == 3)))
,s3_dist_skims,((odt_skims['HOV3_L_DIST'] * (_vot_bin_s3 == 1)) + (odt_skims['HOV3_M_DIST'] * (_vot_bin_s3 == 2)) + (odt_skims['HOV3_H_DIST'] * (_vot_bin_s3 == 3)))
,s3_cost_skims,((odt_skims['HOV3_L_TOLLCOST'] * (_vot_bin_s3 == 1)) + (odt_skims['HOV3_M_TOLLCOST'] * (_vot_bin_s3 == 2)) + (odt_skims['HOV3_H_TOLLCOST'] * (_vot_bin_s3 == 3)))
,s3_time_skims,((odt_skims['HOV3_L_TIME'] * (_vot_bin_s3 == 1)) + (odt_skims['HOV3_M_TIME'] * (_vot_bin_s3 == 2)) + (odt_skims['HOV3_H_TIME'] * (_vot_bin_s3 == 3)))
,walk_time,od_skims['walkTime']
,walk_available,((walk_time < max_walk_time) & (walk_time > 0))
#,,
,origin,df.origin if 'origin' in df.columns else df.home_zone_id
,destination,df.destination if 'destination' in df.columns else df.alt_dest
#access egress distances,,
,origin_local_dist,"reindex(land_use.walk_dist_local_bus, origin)"
,origin_prm_dist,"reindex(land_use.walk_dist_premium_transit, origin)"
,origin_mix_dist,"np.minimum(origin_local_dist, origin_prm_dist)"
,origin_micro_local_dist,"reindex(land_use.micro_dist_local_bus, origin)"
,origin_micro_prm_dist,"reindex(land_use.micro_dist_premium_transit, origin)"
,origin_micro_mix_dist,"np.minimum(origin_micro_local_dist, origin_micro_prm_dist)"
,dest_local_dist,"reindex(land_use.walk_dist_local_bus, destination)"
,dest_prm_dist,"reindex(land_use.walk_dist_premium_transit, destination)"
,dest_mix_dist,"np.minimum(dest_local_dist, dest_prm_dist)"
,dest_micro_local_dist,"reindex(land_use.micro_dist_local_bus, destination)"
,dest_micro_prm_dist,"reindex(land_use.micro_dist_premium_transit, destination)"
,dest_micro_mix_dist,"np.minimum(dest_micro_local_dist, dest_micro_prm_dist)"
#access egress times,,
,origin_local_time,origin_local_dist * 60/walkSpeed
,origin_prm_time,origin_prm_dist * 60/walkSpeed
,origin_mix_time,origin_mix_dist * 60/walkSpeed
,dest_local_time,dest_local_dist * 60/walkSpeed
,dest_prm_time,dest_prm_dist * 60/walkSpeed
,dest_mix_time,dest_mix_dist * 60/walkSpeed
#,,
,walk_local_available,(origin_local_time<=1)&(dest_local_dist<=1)&(odt_skims['WALK_LOC_TOTALIVTT']>0)
,walk_premium_available,(origin_prm_time<=1.2)&(dest_prm_dist<=1.2)&(odt_skims['WALK_PRM_TOTALIVTT']>0)
,walk_mix_available,(origin_mix_time<=1.2)&(dest_mix_dist<=1.2)&(odt_skims['WALK_MIX_TOTALIVTT']>0)&(odt_skims['WALK_MIX_XFERS']>0)
# defined in network_los: exp_asc,,
,density_measure,"reindex(land_use.PopEmpDenPerMi, df[ORIGIN])"
,density_bin,"pd.cut(density_measure, bins=[-np.inf] + wait_time_distribution_by_density_breaks + [np.inf], labels=[1,2,3,4,5]).astype(int)"
,taxi_wait_time_mean,"density_bin.map({k: v for k,v in taxi_wait_time_mean_by_density.items()})"
,taxi_wait_time_sd,"density_bin.map({k: v for k,v in taxi_wait_time_sd_by_density.items()})"
,tnc_single_wait_time_mean,"density_bin.map({k: v for k,v in tnc_single_wait_time_mean_by_density.items()})"
,tnc_single_wait_time_sd,"density_bin.map({k: v for k,v in tnc_single_wait_time_sd_by_density.items()})"
,tnc_shared_wait_time_mean,"density_bin.map({k: v for k,v in tnc_shared_wait_time_mean_by_density.items()})"
,tnc_shared_wait_time_sd,"density_bin.map({k: v for k,v in tnc_shared_wait_time_sd_by_density.items()})"
,taxi_wait_time,"rng.lognormal_for_df(df.set_index('tour_id'), mu=taxi_wait_time_mean.values, sigma=taxi_wait_time_sd.values, broadcast=True, scale=True).set_axis(df.index, axis='index')"
,tnc_single_wait_time,"rng.lognormal_for_df(df.set_index('tour_id'), mu=tnc_single_wait_time_mean.values, sigma=tnc_single_wait_time_sd.values, broadcast=True, scale=True).set_axis(df.index, axis='index')"
,tnc_shared_wait_time,"rng.lognormal_for_df(df.set_index('tour_id'), mu=tnc_shared_wait_time_mean.values, sigma=tnc_shared_wait_time_sd.values, broadcast=True, scale=True).set_axis(df.index, axis='index')"
# Microtransit and NEV,,
microtransit available at origin,microtransit_orig,"reindex(land_use.microtransit, df[orig_col_name])"
microtransit available at destination,microtransit_dest,"reindex(land_use.microtransit, df[dest_col_name])"
microtransit operating at time of trip,microtransit_operating,True
microtransit available,microtransit_available,(microtransit_orig > 0) & (microtransit_orig == microtransit_dest) & (s3_dist_skims < microtransitMaxDist) & microtransit_operating
microtransit direct time,microtransit_direct_time,"np.maximum(s3_dist_skims/microtransitSpeed*60, s3_time_skims)"
microtransit total time,microtransit_time,"np.maximum(microtransit_direct_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_time)"
nev available at origin,nev_orig,"reindex(land_use.nev, df[orig_col_name])"
nev available at destination,nev_dest,"reindex(land_use.nev, df[dest_col_name])"
nev operating at time of trip,nev_operating,True
nev available,nev_available,(nev_orig > 0) & (nev_orig == nev_dest) & (s3_dist_skims < nevMaxDist) & nev_operating
nev direct time,nev_direct_time,"np.maximum(s3_dist_skims/nevSpeed*60, s3_time_skims)"
nev total time,nev_time,"np.maximum(nev_direct_time + nevDiversionConstant, nevDiversionFactor*nev_direct_time)"
# Microtransit and NEV egress from transit,,
outbound microtransit egress from premium available,microtransit_local_egress_available_out,df.outbound & (microtransit_dest>0) & (dest_micro_local_dist>maxWalkIfMTAccessAvailable) & (dest_micro_local_dist<microtransitMaxDist) & microtransit_operating
outbound microtransit direct egress from premium time,microtransit_direct_local_egress_time_out,"dest_micro_local_dist/microtransitSpeed*60"
outbound microtransit egress from premium time,microtransit_local_egress_time_out,"np.maximum(microtransit_direct_local_egress_time_out + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_local_egress_time_out)"
inbound microtransit access to premium available,microtransit_local_access_available_in,~df.outbound & (microtransit_orig>0) & (origin_micro_local_dist>maxWalkIfMTAccessAvailable) & (origin_micro_local_dist<microtransitMaxDist) & microtransit_operating
inbound microtransit direct access to premium time,microtransit_direct_local_access_time_in,"origin_micro_local_dist/microtransitSpeed*60"
inbound microtransit access to premium time,microtransit_local_access_time_in,"np.maximum(microtransit_direct_local_access_time_in + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_local_access_time_in)"
outbound nev egress from premium available,nev_local_egress_available_out,df.outbound & (nev_dest>0) & (dest_micro_local_dist>maxWalkIfMTAccessAvailable) & (dest_micro_local_dist<nevMaxDist) & nev_operating
outbound nev direct egress from premium time,nev_direct_local_egress_time_out,"dest_micro_local_dist/nevSpeed*60"
outbound nev egress from premium time,nev_local_egress_time_out,"np.maximum(nev_direct_local_egress_time_out + microtransitDiversionConstant, microtransitDiversionFactor*nev_direct_local_egress_time_out)"
inbound nev access to premium available,nev_local_access_available_in,~df.outbound & (nev_orig>0) & (origin_micro_local_dist>maxWalkIfMTAccessAvailable) & (origin_micro_local_dist<nevMaxDist) & nev_operating
inbound nev direct access to premium time,nev_direct_local_access_time_in,"origin_micro_local_dist/nevSpeed*60"
inbound nev access to premium time,nev_local_access_time_in,"np.maximum(nev_direct_local_access_time_in + microtransitDiversionConstant, microtransitDiversionFactor*nev_direct_local_access_time_in)"
#,,
outbound microtransit egress from premium available,microtransit_prm_egress_available_out,df.outbound & (microtransit_dest>0) & (dest_micro_prm_dist>maxWalkIfMTAccessAvailable) & (dest_micro_prm_dist<microtransitMaxDist) & microtransit_operating
outbound microtransit direct egress from premium time,microtransit_direct_prm_egress_time_out,"dest_micro_prm_dist/microtransitSpeed*60"
outbound microtransit egress from premium time,microtransit_prm_egress_time_out,"np.maximum(microtransit_direct_prm_egress_time_out + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_prm_egress_time_out)"
inbound microtransit access to premium available,microtransit_prm_access_available_in,~df.outbound & (microtransit_orig>0) & (origin_micro_prm_dist>maxWalkIfMTAccessAvailable) & (origin_micro_prm_dist<microtransitMaxDist) & microtransit_operating
inbound microtransit direct access to premium time,microtransit_direct_prm_access_time_in,"origin_micro_prm_dist/microtransitSpeed*60"
inbound microtransit access to premium time,microtransit_prm_access_time_in,"np.maximum(microtransit_direct_prm_access_time_in + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_prm_access_time_in)"
outbound nev egress from premium available,nev_prm_egress_available_out,df.outbound & (nev_dest>0) & (dest_micro_prm_dist>maxWalkIfMTAccessAvailable) & (dest_micro_prm_dist<nevMaxDist) & nev_operating
outbound nev direct egress from premium time,nev_direct_prm_egress_time_out,"dest_micro_prm_dist/nevSpeed*60"
outbound nev egress from premium time,nev_prm_egress_time_out,"np.maximum(nev_direct_prm_egress_time_out + microtransitDiversionConstant, microtransitDiversionFactor*nev_direct_prm_egress_time_out)"
inbound nev access to premium available,nev_prm_access_available_in,~df.outbound & (nev_orig>0) & (origin_micro_prm_dist>maxWalkIfMTAccessAvailable) & (origin_micro_prm_dist<nevMaxDist) & nev_operating
inbound nev direct access to premium time,nev_direct_prm_access_time_in,"origin_micro_prm_dist/nevSpeed*60"
inbound nev access to premium time,nev_prm_access_time_in,"np.maximum(nev_direct_prm_access_time_in + microtransitDiversionConstant, microtransitDiversionFactor*nev_direct_prm_access_time_in)"
#,,
outbound microtransit egress from premium available,microtransit_mix_egress_available_out,df.outbound & (microtransit_dest>0) & (dest_micro_mix_dist>maxWalkIfMTAccessAvailable) & (dest_micro_mix_dist<microtransitMaxDist) & microtransit_operating
outbound microtransit direct egress from premium time,microtransit_direct_mix_egress_time_out,"dest_micro_mix_dist/microtransitSpeed*60"
outbound microtransit egress from premium time,microtransit_mix_egress_time_out,"np.maximum(microtransit_direct_mix_egress_time_out + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_mix_egress_time_out)"
inbound microtransit access to premium available,microtransit_mix_access_available_in,~df.outbound & (microtransit_orig>0) & (origin_micro_mix_dist>maxWalkIfMTAccessAvailable) & (origin_micro_mix_dist<microtransitMaxDist) & microtransit_operating
inbound microtransit direct access to premium time,microtransit_direct_mix_access_time_in,"origin_micro_mix_dist/microtransitSpeed*60"
inbound microtransit access to premium time,microtransit_mix_access_time_in,"np.maximum(microtransit_direct_mix_access_time_in + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_mix_access_time_in)"
outbound nev egress from premium available,nev_mix_egress_available_out,df.outbound & (nev_dest>0) & (dest_micro_mix_dist>maxWalkIfMTAccessAvailable) & (dest_micro_mix_dist<nevMaxDist) & nev_operating
outbound nev direct egress from premium time,nev_direct_mix_egress_time_out,"dest_micro_mix_dist/nevSpeed*60"
outbound nev egress from premium time,nev_mix_egress_time_out,"np.maximum(nev_direct_mix_egress_time_out + microtransitDiversionConstant, microtransitDiversionFactor*nev_direct_mix_egress_time_out)"
inbound nev access to premium available,nev_mix_access_available_in,~df.outbound & (nev_orig>0) & (origin_micro_mix_dist>maxWalkIfMTAccessAvailable) & (origin_micro_mix_dist<nevMaxDist) & nev_operating
inbound nev direct access to premium time,nev_direct_mix_access_time_in,"origin_micro_mix_dist/nevSpeed*60"
inbound nev access to premium time,nev_mix_access_time_in,"np.maximum(nev_direct_mix_access_time_in + microtransitDiversionConstant, microtransitDiversionFactor*nev_direct_mix_access_time_in)"
# Additional transfers from microtransit and NEV,,
microtransit/nev access transfer,mtnev_acc_xfer_in,microtransit_local_access_available_in | microtransit_prm_access_available_in | microtransit_mix_access_available_in | nev_local_access_available_in | nev_prm_access_available_in | nev_mix_access_available_in
microtransit/nev egress transfer,mtnev_egr_xfer_out,microtransit_local_egress_available_out | microtransit_prm_egress_available_out | microtransit_mix_egress_available_out | nev_local_egress_available_out | nev_prm_egress_available_out | nev_mix_egress_available_out