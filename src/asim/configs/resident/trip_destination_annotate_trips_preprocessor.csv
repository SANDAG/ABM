Description,Target,Expression
#,,
,tour_mode,"reindex(tours.tour_mode, df.tour_id)"
,is_joint,"reindex(tours.tour_category, df.tour_id) == 'joint'"
,tour_leg_origin,"np.where(df.outbound,reindex(tours.origin, df.tour_id), reindex(tours.destination, df.tour_id))"
,tour_leg_dest,"np.where(df.outbound,reindex(tours.destination, df.tour_id), reindex(tours.origin, df.tour_id))"
#,,
,_tod,"np.where(df.outbound,reindex_i(tours.start, df.tour_id),reindex_i(tours.end, df.tour_id))"
,trip_period,network_los.skim_time_period_label(_tod)
#,,
adding _trips to avoid conflict with the variables in the tours_merged,income_trips,"reindex(households.income, df.person_id)"
adding _trips to avoid conflict with the variables in the tours_merged,age_trips,"reindex(persons.age, df.person_id)"
,female,"reindex(persons.female, df.person_id)"
#,age_55p,"reindex(persons.age_55_p, df.person_id)"
#,age_35_54,"reindex(persons.age_35_to_54, df.person_id)"
,workTour,"np.where(df.primary_purpose == 'work', 1, 0)"
,schoolTour,"np.where(df.primary_purpose == 'school', 1, 0)"
,univTour,"np.where(df.primary_purpose == 'univ', 1, 0)"
,shopTour,"np.where(df.primary_purpose == 'shopping', 1, 0)"
,othmainTour,"np.where(df.primary_purpose == 'othmaint', 1, 0)"
,discTour,"np.where(df.primary_purpose == 'discr', 1, 0)"
,socTour,"np.where(df.primary_purpose == 'social', 1, 0)"
,atworkTour,"np.where(df.primary_purpose == 'atwork', 1, 0)"
,mandTour,"np.where(df.primary_purpose.isin(['work', 'school', 'univ']), 1, 0)"
,workStop,"np.where(df.purpose == 'work', 1, 0)"
,univStop,"np.where(df.purpose == 'univ', 1, 0)"
,othmainStop,"np.where(df.purpose == 'othmaint', 1, 0)"
,discStop,"np.where(df.purpose == 'othdiscr', 1, 0)"
,shopStop,"np.where(df.purpose == 'shopping', 1, 0)"
,eatStop,"np.where(df.purpose == 'eatout', 1, 0)"
,socStop,"np.where(df.purpose == 'social', 1, 0)"
,nonmotorTour,"np.where(tour_mode.isin(['WALK','BIKE']), 1, 0)"
,walkTour,"np.where(tour_mode == 'WALK', 1, 0)"
,bikeTour,"np.where(tour_mode == 'BIKE', 1, 0)"
,microTour,"np.where((tour_mode == 'ESCOOTER') | (tour_mode == 'EBIKE'), 1, 0)"
Micromobility access Time,o_MicroAccessTime,"reindex(land_use.MicroAccessTime,df.origin)"
,max_walk_distance,max_walk_distance
,max_bike_distance,max_bike_distance
,microAccessThreshold,microAccessThreshold