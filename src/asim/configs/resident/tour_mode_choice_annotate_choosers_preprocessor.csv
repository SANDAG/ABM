Description,Target,Expression,
#,,,
local,_DF_IS_TOUR,'tour_type' in df.columns,
,is_atwork_subtour,(df.tour_category == 'atwork') if _DF_IS_TOUR else False,
,_parent_tour_veh,"reindex(tours['selected_vehicle'], df['parent_tour_id']) if 'selected_vehicle' in df.columns else np.nan",
,_parent_tour_mode,"reindex(tours['tour_mode'], df['parent_tour_id']) if 'tour_mode' in df.columns else np.nan",
,sov_veh_option,"np.where(is_atwork_subtour, _parent_tour_veh, df.get('vehicle_occup_1', np.nan))",
,sr2_veh_option,"np.where(is_atwork_subtour, _parent_tour_veh, df.get('vehicle_occup_2', np.nan))",
,sr3p_veh_option,"np.where(is_atwork_subtour, _parent_tour_veh, df.get('vehicle_occup_3.5', np.nan))",
#AV factors,,,
SOV tour Vehicle is AV,sov_tour_uses_av,"np.where(pd.notna(df.get('vehicle_occup_1', np.nan)), pd.Series(sov_veh_option, dtype = 'str').str.contains('AV'), False)"
SR2 tour Vehicle is AV,sr2_tour_uses_av,"np.where(pd.notna(df.get('vehicle_occup_2', np.nan)), pd.Series(sr2_veh_option, dtype = 'str').str.contains('AV'), False)"
SR3 tour Vehicle is AV,sr3_tour_uses_av,"np.where(pd.notna(df.get('vehicle_occup_3.5', np.nan)), pd.Series(sr3p_veh_option, dtype = 'str').str.contains('AV'), False)"
SOV AV IVT Factor Adjustment,autoIVTFactor_DA,"np.where(sov_tour_uses_av, autoIVTFactorAV, 1.0)"
SR2 AV IVT Factor Adjustment,autoIVTFactor_SR2,"np.where(sr2_tour_uses_av, autoIVTFactorAV, 1.0)"
SR3+ AV IVT Factor Adjustment,autoIVTFactor_SR3,"np.where(sr3_tour_uses_av, autoIVTFactorAV, 1.0)"
SOV AV Parking Cost Factor Adjustment,autoParkingCostFactor_DA,"np.where(sov_tour_uses_av, autoParkingCostFactorAV, 1.0)"
SR2 AV Parking Cost Factor Adjustment,autoParkingCostFactor_SR2,"np.where(sr2_tour_uses_av, autoParkingCostFactorAV, 1.0)"
SR3+ AV Parking Cost Factor Adjustment,autoParkingCostFactor_SR3,"np.where(sr3_tour_uses_av, autoParkingCostFactorAV, 1.0)"
SOV AV Auto Terminal Time Factor,autoTermTimeFactor_DA,"np.where(sov_tour_uses_av, autoTerminalTimeFactorAV, 1.0)"
SR2 AV Auto Terminal Time Factor,autoTermTimeFactor_SR2,"np.where(sr2_tour_uses_av, autoTerminalTimeFactorAV, 1.0)"
SR3+ AV Auto Terminal Time Factor,autoTermTimeFactor_SR3,"np.where(sr3_tour_uses_av, autoTerminalTimeFactorAV, 1.0)"
SOV AV Auto Terminal Time Factor,autoCPMFactor_DA,"np.where(sov_tour_uses_av, autoCostPerMileFactorAV, 1.0)"
SR2 AV Auto Terminal Time Factor,autoCPMFactor_SR2,"np.where(sr2_tour_uses_av, autoCostPerMileFactorAV, 1.0)"
SR3+ AV Auto Terminal Time Factor,autoCPMFactor_SR3,"np.where(sr3_tour_uses_av, autoCostPerMileFactorAV, 1.0)"
AV Min Age to Drive Alone,minimumAgeDA,"np.where(sov_tour_uses_av, minAgeDriveAloneAV, 16)"
reimburseProportion placeholder,reimburseProportion,0,
"Tour duration, in hours",tourDuration,df.duration/2,
#,,,
,num_participants,df.number_of_participants if _DF_IS_TOUR else 1,
,is_joint,(df.tour_category=='joint') if _DF_IS_TOUR else False,
treat tours as work if tour_type not yet decided,tour_type,"df.get('tour_type', default='work')",
#,,,
,is_mandatory,(df.tour_category=='mandatory') if 'tour_category' in df.columns else False,
,is_indiv,~is_joint,
,is_escort,(tour_type == 'escort') if _DF_IS_TOUR else False,
# Auto operating costs,,,
,sov_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sov_veh_option, df.index)) if 'vehicle_occup_1' in df.columns else np.nan",
,sov_auto_op_cost,"np.where(sov_auto_op_cost.isna() | (pd.Series(sov_veh_option, df.index) == 'non_hh_veh'), costPerMile, sov_auto_op_cost)",
,sr2_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sr2_veh_option, df.index)) if 'vehicle_occup_2' in df.columns else np.nan",
,sr2_auto_op_cost,"np.where(sr2_auto_op_cost.isna() | (pd.Series(sr2_veh_option, df.index) == 'non_hh_veh'), costPerMile, sr2_auto_op_cost)",
,sr3p_auto_op_cost,"reindex(vehicles.groupby('vehicle_type')['auto_operating_cost'].mean(), pd.Series(sr3p_veh_option, df.index)) if 'vehicle_occup_3.5' in df.columns else np.nan",
,sr3p_auto_op_cost,"np.where(sr3p_auto_op_cost.isna() | (pd.Series(sr3p_veh_option, df.index) == 'non_hh_veh'), costPerMile, sr3p_auto_op_cost)",
# RIDEHAIL,,,
household_density calculated in annotate_landuse in acres and is converted to sq miles here,_origin_density_measure,"reindex(land_use.PopEmpDenPerMi, df[orig_col_name])",
employment_density calculated in annotate_landuse in acres and is converted to sq miles here,_dest_density_measure,"reindex(land_use.PopEmpDenPerMi, df[dest_col_name])",
,origin_density,"pd.cut(_origin_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)",
,dest_density,"pd.cut(_dest_density_measure, bins=[-np.inf, 500, 2000, 5000, 15000, np.inf], labels=[5, 4, 3, 2, 1]).astype(int)",
,origin_zone_taxi_wait_time_mean,"origin_density.map({k: v for k, v in Taxi_waitTime_mean.items()})",
,origin_zone_taxi_wait_time_sd,"origin_density.map({k: v for k, v in Taxi_waitTime_sd.items()})",
,dest_zone_taxi_wait_time_mean,"dest_density.map({k: v for k, v in Taxi_waitTime_mean.items()})",
,dest_zone_taxi_wait_time_sd,"dest_density.map({k: v for k, v in Taxi_waitTime_sd.items()})",
# ,, Note that the mean and standard deviation are not the values for the distribution itself but of the underlying normal distribution it is derived from
,origTaxiWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_taxi_wait_time_mean, sigma=origin_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,destTaxiWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_taxi_wait_time_mean, sigma=dest_zone_taxi_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,origin_zone_singleTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})",
,origin_zone_singleTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})",
,dest_zone_singleTNC_wait_time_mean,"dest_density.map({k: v for k, v in TNC_single_waitTime_mean.items()})",
,dest_zone_singleTNC_wait_time_sd,"dest_density.map({k: v for k, v in TNC_single_waitTime_sd.items()})",
,origSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_singleTNC_wait_time_mean, sigma=origin_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,destSingleTNCWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_singleTNC_wait_time_mean, sigma=dest_zone_singleTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,origin_zone_sharedTNC_wait_time_mean,"origin_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})",
,origin_zone_sharedTNC_wait_time_sd,"origin_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})",
,dest_zone_sharedTNC_wait_time_mean,"dest_density.map({k: v for k, v in TNC_shared_waitTime_mean.items()})",
,dest_zone_sharedTNC_wait_time_sd,"dest_density.map({k: v for k, v in TNC_shared_waitTime_sd.items()})",
,origSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=origin_zone_sharedTNC_wait_time_mean, sigma=origin_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,destSharedTNCWaitTime,"rng.lognormal_for_df(df, mu=dest_zone_sharedTNC_wait_time_mean, sigma=dest_zone_sharedTNC_wait_time_sd, broadcast=True, scale=True).clip(min_waitTime, max_waitTime)",
,totalWaitTaxi,origTaxiWaitTime + destTaxiWaitTime,
,totalWaitSingleTNC,origSingleTNCWaitTime + destSingleTNCWaitTime,
,totalWaitSharedTNC,origSharedTNCWaitTime + destSharedTNCWaitTime,
#parking,,,
,free_parking_available,(tour_type == 'work') & df.free_parking_at_work if _DF_IS_TOUR else False,
person has free on-site parking at workplace,freeOnsite,"(free_parking_available)*np.where(is_indiv,1,0)",
# new reimbursement amount,reimburseProportion,"df.reimburseProportion*np.where(is_indiv,1,0)",
new daily parking cost with reimbursement,parkingCostDayDollars,"reindex(land_use.exp_daily, df[dest_col_name])",
new hourly parking cost with reimbursement,parkingCostHourDollars,"reindex(land_use.exp_hourly, df[dest_col_name])",
new monthly parking cost with reimbursement,parkingCostMonthDollars,"reindex(land_use.exp_monthly, df[dest_col_name])",
Parking area,parkingConstrainedArea,"np.where(reindex(land_use.parking_type, df[dest_col_name]) == 1, 1, 0)",
daily cost converted to cents,parkingCostDay,parkingCostDayDollars*100,
hourly cost converted to cents,parkingCostHour,parkingCostHourDollars*100,
monthly cost converted to cents,parkingCostMonth,parkingCostMonthDollars*100,
Tour parking cost for full-time workers and university students,_parkingCostBeforeReimb,"df.ptype.isin([1,3]) * is_indiv * np.minimum(parkingCostMonth/22, parkingCostDay)",
Tour parking cost for full-time workers and university students,_parkingCostBeforeReimb,"df.ptype.isin([1,3]) * is_indiv * np.minimum(_parkingCostBeforeReimb, parkingCostHour * tourDuration)",
Tour parking cost for other person types,parkingCostBeforeReimb,"np.where((~df.ptype.isin([1,3]) * is_indiv) | (is_joint), np.minimum(parkingCostDay, parkingCostHour * tourDuration), _parkingCostBeforeReimb)",
Reimbursement applies to this tour purpose,reimbursePurpose,df.tour_type == 'work' if _DF_IS_TOUR else False,
Effective parking cost for free parkers,_parkingCost,"0 * np.where(is_indiv*reimbursePurpose*freeOnsite,1,0)",
Effective parking cost for reimbursed parkers,_parkingCost,"np.where(is_indiv*reimbursePurpose*(1-freeOnsite), np.maximum((1-reimburseProportion) * parkingCostBeforeReimb, 0),_parkingCost)",
Effective parking cost applied to tour purpose,parkingCost,"np.where(is_joint+is_indiv*(1-reimbursePurpose), parkingCostBeforeReimb,_parkingCost)",
# cost coef,,,
,_income_exponent,"np.where(tour_type == 'work', 0.6, 0.5)",
,cost_sensitivity,"np.maximum(df.income,1000).pow(_income_exponent)",
,c_cost,coef_income / cost_sensitivity,
# ivt coef,,,
,time_factor,"np.where(tour_type=='work', df.time_factor_work, df.time_factor_nonwork)",
,c_ivt,coef_ivt * time_factor,
#,,,
,vot_da,c_ivt / c_cost * 0.6,
,vot_s2,vot_da / cost_share_s2,
,vot_s3,vot_da / cost_share_s3,
,_vot_bin_da,"np.where(vot_da < vot_threshold_low, 1, np.where(vot_da < vot_threshold_med, 2, 3))",
,_vot_bin_s2,"np.where(vot_s2 < vot_threshold_low, 1, np.where(vot_s2 < vot_threshold_med, 2, 3))",
,_vot_bin_s3,"np.where(vot_s3 < vot_threshold_low, 1, np.where(vot_s3 < vot_threshold_med, 2, 3))",
# vot-indexed skims,,,
,ownsTransponder,df.transponder_ownership if 'transponder_ownership' in df else 0,
DA skim based on Transponder ownership,da_dist_skims_out,"(np.where(ownsTransponder==1, odt_skims['SOV_TR_L_DIST'], odt_skims['SOV_NT_L_DIST']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_TR_M_DIST'], odt_skims['SOV_NT_M_DIST']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_TR_H_DIST'], odt_skims['SOV_NT_H_DIST']) * (_vot_bin_da == 3))",
,da_dist_skims_inb,"(np.where(ownsTransponder==1, dot_skims['SOV_TR_L_DIST'], dot_skims['SOV_NT_L_DIST']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, dot_skims['SOV_TR_M_DIST'], dot_skims['SOV_NT_M_DIST']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, dot_skims['SOV_TR_H_DIST'], dot_skims['SOV_NT_H_DIST']) * (_vot_bin_da == 3))",
,da_cost_skims_out,"(np.where(ownsTransponder==1, odt_skims['SOV_TR_L_TOLLCOST'], odt_skims['SOV_NT_L_TOLLCOST']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_TR_M_TOLLCOST'], odt_skims['SOV_NT_M_TOLLCOST']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_TR_H_TOLLCOST'], odt_skims['SOV_NT_H_TOLLCOST']) * (_vot_bin_da == 3))",
,da_cost_skims_inb,"(np.where(ownsTransponder==1, dot_skims['SOV_TR_L_TOLLCOST'], dot_skims['SOV_NT_L_TOLLCOST']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, dot_skims['SOV_TR_M_TOLLCOST'], dot_skims['SOV_NT_M_TOLLCOST']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, dot_skims['SOV_TR_H_TOLLCOST'], dot_skims['SOV_NT_H_TOLLCOST']) * (_vot_bin_da == 3))",
,da_time_skims_out,"(np.where(ownsTransponder==1, odt_skims['SOV_TR_L_TIME'], odt_skims['SOV_NT_L_TIME']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, odt_skims['SOV_TR_M_TIME'], odt_skims['SOV_NT_M_TIME']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, odt_skims['SOV_TR_H_TIME'], odt_skims['SOV_NT_H_TIME']) * (_vot_bin_da == 3))",
,da_time_skims_inb,"(np.where(ownsTransponder==1, dot_skims['SOV_TR_L_TIME'], dot_skims['SOV_NT_L_TIME']) * (_vot_bin_da == 1)) + (np.where(ownsTransponder==1, dot_skims['SOV_TR_M_TIME'], dot_skims['SOV_NT_M_TIME']) * (_vot_bin_da == 2)) + (np.where(ownsTransponder==1, dot_skims['SOV_TR_H_TIME'], dot_skims['SOV_NT_H_TIME']) * (_vot_bin_da == 3))",
,da_rel_skims_out,(((odt_skims['SOV_NT_L_REL']) * (_vot_bin_da == 1)) + ((odt_skims['SOV_NT_M_REL']) * (_vot_bin_da == 2)) + ((odt_skims['SOV_NT_H_REL']) * (_vot_bin_da == 3))),
,da_rel_skims_inb,(((dot_skims['SOV_NT_L_REL']) * (_vot_bin_da == 1)) + ((dot_skims['SOV_NT_M_REL']) * (_vot_bin_da == 2)) + ((dot_skims['SOV_NT_H_REL']) * (_vot_bin_da == 3))),
,s2_dist_skims_out,(((odt_skims['HOV2_L_DIST']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_M_DIST']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_H_DIST']) * (_vot_bin_s2 == 3))),
,s2_dist_skims_inb,(((dot_skims['HOV2_L_DIST']) * (_vot_bin_s2 == 1)) + ((dot_skims['HOV2_M_DIST']) * (_vot_bin_s2 == 2)) + ((dot_skims['HOV2_H_DIST']) * (_vot_bin_s2 == 3))),
,s2_cost_skims_out,(((odt_skims['HOV2_L_TOLLCOST']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_M_TOLLCOST']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_H_TOLLCOST']) * (_vot_bin_s2 == 3))),
,s2_cost_skims_inb,(((dot_skims['HOV2_L_TOLLCOST']) * (_vot_bin_s2 == 1)) + ((dot_skims['HOV2_M_TOLLCOST']) * (_vot_bin_s2 == 2)) + ((dot_skims['HOV2_H_TOLLCOST']) * (_vot_bin_s2 == 3))),
,s2_time_skims_out,(((odt_skims['HOV2_L_TIME']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_M_TIME']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_H_TIME']) * (_vot_bin_s2 == 3))),
,s2_time_skims_inb,(((dot_skims['HOV2_L_TIME']) * (_vot_bin_s2 == 1)) + ((dot_skims['HOV2_M_TIME']) * (_vot_bin_s2 == 2)) + ((dot_skims['HOV2_H_TIME']) * (_vot_bin_s2 == 3))),
,s2_rel_skims_out,(((odt_skims['HOV2_L_REL']) * (_vot_bin_s2 == 1)) + ((odt_skims['HOV2_M_REL']) * (_vot_bin_s2 == 2)) + ((odt_skims['HOV2_H_REL']) * (_vot_bin_s2 == 3))),
,s2_rel_skims_inb,(((dot_skims['HOV2_L_REL']) * (_vot_bin_s2 == 1)) + ((dot_skims['HOV2_M_REL']) * (_vot_bin_s2 == 2)) + ((dot_skims['HOV2_H_REL']) * (_vot_bin_s2 == 3))),
,s3_dist_skims_out,(((odt_skims['HOV3_L_DIST']) * (_vot_bin_s3 == 1)) + ((odt_skims['HOV3_M_DIST']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_H_DIST']) * (_vot_bin_s3 == 3))),
,s3_dist_skims_inb,(((dot_skims['HOV3_L_DIST']) * (_vot_bin_s3 == 1)) + ((dot_skims['HOV3_M_DIST']) * (_vot_bin_s3 == 2)) + ((dot_skims['HOV3_H_DIST']) * (_vot_bin_s3 == 3))),
,s3_cost_skims_out,(((odt_skims['HOV3_L_TOLLCOST']) * (_vot_bin_s3 == 1)) + ((odt_skims['HOV3_M_TOLLCOST']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_H_TOLLCOST']) * (_vot_bin_s3 == 3))),
,s3_cost_skims_inb,(((dot_skims['HOV3_L_TOLLCOST']) * (_vot_bin_s3 == 1)) + ((dot_skims['HOV3_M_TOLLCOST']) * (_vot_bin_s3 == 2)) + ((dot_skims['HOV3_H_TOLLCOST']) * (_vot_bin_s3 == 3))),
,s3_time_skims_out,(((odt_skims['HOV3_L_TIME']) * (_vot_bin_s3 == 1)) + ((odt_skims['HOV3_M_TIME']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_H_TIME']) * (_vot_bin_s3 == 3))),
,s3_time_skims_inb,(((dot_skims['HOV3_L_TIME']) * (_vot_bin_s3 == 1)) + ((dot_skims['HOV3_M_TIME']) * (_vot_bin_s3 == 2)) + ((dot_skims['HOV3_H_TIME']) * (_vot_bin_s3 == 3))),
,s3_rel_skims_out,(((odt_skims['HOV3_L_REL']) * (_vot_bin_s3 == 1)) + ((odt_skims['HOV3_M_REL']) * (_vot_bin_s3 == 2)) + ((odt_skims['HOV3_H_REL']) * (_vot_bin_s3 == 3))),
,s3_rel_skims_inb,(((dot_skims['HOV3_L_REL']) * (_vot_bin_s3 == 1)) + ((dot_skims['HOV3_M_REL']) * (_vot_bin_s3 == 2)) + ((dot_skims['HOV3_H_REL']) * (_vot_bin_s3 == 3))),
,walk_time_skims_out,od_skims['walkTime'],
assuming walktime symmetry,walk_time_skims_inb,od_skims['walkTime'],
#placeholder for walk time skim,walk_time_skims_out,odt_skims['SOV_TR_L_DIST'] / 3 * 60,
#placeholder for walk time skim,walk_time_skims_inb,dot_skims['SOV_TR_L_DIST'] / 3 * 60,
#,,,
Determining Tour Origin,origin,df.origin if 'origin' in df.columns else df.home_zone_id if 'home_zone_id' in df.columns else df.workplace_zone_id,
#,,,
DistanceToCoast,DistanceToCoast,"reindex(land_use.milestocoast,origin)",
#,,,
Person age,age,df.age,
# Household income (in dollars),income,df.incomeInDollars,
#,,,
Joint tour,is_joint,"df.get('tour_category', default=False) == 'joint'",
Determining Tour Destination,destination,df.destination if 'destination' in df.columns else df.alt_dest,
Origin MGRA Dwelling Unit Density,oMGRADUDen,"reindex(land_use.duden,origin)",
Origin MGRA Employment Density,oMGRAEmpDen,"reindex(land_use.empden,origin)",
Origin MGRA Total Intersections,oMGRATotInt,"reindex(land_use.totint,origin)",
Destination MGRA Dwelling Unit Density,dMGRADUDen,"reindex(land_use.duden,destination)",
Destination MGRA Employment Density,dMGRAEmpDen,"reindex(land_use.empden,destination)",
Destination MGRA Total Intersections,dMGRATotInt,"reindex(land_use.totint,destination)",
Origin MGRA Mix,oMGRAMix,"np.where(oMGRADUDen+oMGRAEmpDen > 0, (oMGRADUDen*oMGRAEmpDen)/(oMGRADUDen+oMGRAEmpDen),0)",
Destination MGRA Mix,dMGRAMix,"np.where(dMGRADUDen+dMGRAEmpDen > 0, (dMGRADUDen*dMGRAEmpDen)/(dMGRADUDen+dMGRAEmpDen),0)",
Origin MGRA Dwelling Unit Density Normalized by Average in Bike Estimation Sample,oMGRADUDenNorm_bike,oMGRADUDen/6.77,
Origin MGRA Employment Density Normalized by Average in Bike Estimation Sample,oMGRAEmpDenNorm_bike,oMGRAEmpDen/6.47,
Origin MGRA Dwelling Unit Density Normalized by Average in Walk Estimation Sample,oMGRADUDenNorm_walk,oMGRADUDen/7.18,
Origin MGRA Total Intersections Normalized by Average in Walk Estimation Sample,oMGRATotIntNorm_walk,oMGRATotInt/56.19,
Destination MGRA Employment Density Normalized by Average in Walk Estimation Sample,dMGRAEmpDenNorm_walk,dMGRAEmpDen/13.16,
Normalized Landuse Variable Sum [Origin Employment + DU],LUVarsNormalized_bike,oMGRADUDenNorm_bike + oMGRAEmpDenNorm_bike,
Normalized Landuse Variable Sum [Origin Intersection + DU],LUVarsNormalized_walk,oMGRADUDenNorm_walk + oMGRATotIntNorm_walk,
persontype,personType,"df.ptype*np.where(is_indiv,1,0)",
Origin Terminal Time,oTermTime,"reindex(land_use.terminal_time,origin)",
Destination Terminal Time,dTermTime,"reindex(land_use.terminal_time,destination)",
#,,,
# Below bike info is not defined and is turned off!!,,,
Person is female,female,(df.sex == 2),
bike logsum inbound,bikeLSI,odt_skims['BIKE_LOGSUM'],
bike logsum outbound (same as inbound),bikeLSO,dot_skims['BIKE_LOGSUM'],
bike availability,bikeAvailable,(bikeLSI > -300) & (bikeLSO > -300) & (od_skims['BIKE_TIME']>0),
bike time inbound,bike_time_inb,dot_skims['BIKE_TIME'],
bike time outbound,bike_time_out,odt_skims['BIKE_TIME'],
#,,,
"Cost factor for shared 2 tours, 1/(2^0.8)",costFactorS2,0.57,
"Cost factor for shared 3+ tours, 1/(3.5^0.8)",costFactorS3,0.37,
,sov_available,"(age>=minimumAgeDA) * np.where(is_joint,0,1) * np.where(is_atwork_subtour==0,1,np.where(_parent_tour_mode=='DRIVEALONE',1,0))",
,sr2_available,"np.where(is_joint==0,1,np.where(num_participants>=3,0,1))",
,walkAvailable,"np.where(walk_time_skims_out < max_walk_time, 1,0) * np.where(walk_time_skims_inb < max_walk_time, 1,0)",
,SCHBUS_available,(tour_type =='school') & (personType!=3),
#,,,
Determining Tour Origin,origin,df.origin if 'origin' in df.columns else df.home_zone_id if 'home_zone_id' in df.columns else df.workplace_zone_id,
Determining Tour Destination,destination,df.destination if 'destination' in df.columns else df.alt_dest,
#access egress distances,,,
,origin_local_dist,"reindex(land_use.walk_dist_local_bus, origin)",
,origin_prm_dist,"reindex(land_use.walk_dist_premium_transit, origin)",
,origin_mix_dist,"np.minimum(origin_local_dist, origin_prm_dist)",
,origin_micro_local_dist,"reindex(land_use.micro_dist_local_bus, origin)",
,origin_micro_prm_dist,"reindex(land_use.micro_dist_premium_transit, origin)",
,origin_micro_mix_dist,"np.minimum(origin_micro_local_dist, origin_micro_prm_dist)",
,dest_local_dist,"reindex(land_use.walk_dist_local_bus, destination)",
,dest_prm_dist,"reindex(land_use.walk_dist_premium_transit, destination)",
,dest_mix_dist,"np.minimum(dest_local_dist, dest_prm_dist)",
,dest_micro_local_dist,"reindex(land_use.micro_dist_local_bus, destination)",
,dest_micro_prm_dist,"reindex(land_use.micro_dist_premium_transit, destination)",
,dest_micro_mix_dist,"np.minimum(dest_micro_local_dist, dest_micro_prm_dist)",
#access egress times,,,
,origin_local_time,origin_local_dist * 60/walkSpeed,
,origin_prm_time,origin_prm_dist * 60/walkSpeed,
,origin_mix_time,origin_mix_dist * 60/walkSpeed,
,dest_local_time,dest_local_dist * 60/walkSpeed,
,dest_prm_time,dest_prm_dist * 60/walkSpeed,
,dest_mix_time,dest_mix_dist * 60/walkSpeed,
#,,,
,walk_local_available,(odt_skims['WALK_LOC_TOTALIVTT']>0) & (dot_skims['WALK_LOC_TOTALIVTT']>0),
,walk_premium_available,(odt_skims['WALK_PRM_TOTALIVTT']>0) & (dot_skims['WALK_PRM_TOTALIVTT']>0),
,walk_mix_available,(odt_skims['WALK_MIX_TOTALIVTT']>0) & (dot_skims['WALK_MIX_TOTALIVTT']>0) & (odt_skims['WALK_MIX_XFERS']>0) & (dot_skims['WALK_MIX_XFERS']>0),
,pnr_local_available,(odt_skims['PNROUT_LOC_TOTALIVTT']>0) & (dot_skims['PNRIN_LOC_TOTALIVTT']>0),
,pnr_premium_available,(odt_skims['PNROUT_PRM_TOTALIVTT']>0) & (dot_skims['PNRIN_PRM_TOTALIVTT']>0),
,pnr_mix_available,(odt_skims['PNROUT_MIX_TOTALIVTT']>0) & (dot_skims['PNRIN_MIX_TOTALIVTT']>0) & (odt_skims['PNROUT_MIX_XFERS']>0) & (dot_skims['PNRIN_MIX_XFERS']>0),
,knr_local_available,(odt_skims['KNROUT_LOC_TOTALIVTT']>0) & (dot_skims['KNRIN_LOC_TOTALIVTT']>0),
,knr_premium_available,(odt_skims['KNROUT_PRM_TOTALIVTT']>0) & (dot_skims['KNRIN_PRM_TOTALIVTT']>0),
,knr_mix_available,(odt_skims['KNROUT_MIX_TOTALIVTT']>0) & (dot_skims['KNRIN_MIX_TOTALIVTT']>0) & (odt_skims['KNROUT_MIX_XFERS']>0) & (dot_skims['KNRIN_MIX_XFERS']>0),
,tnc_local_available,(odt_skims['TNCOUT_LOC_TOTALIVTT']>0) & (dot_skims['TNCIN_LOC_TOTALIVTT']>0),
,tnc_premium_available,(odt_skims['TNCOUT_PRM_TOTALIVTT']>0) & (dot_skims['TNCIN_PRM_TOTALIVTT']>0),
,tnc_mix_available,(odt_skims['TNCOUT_MIX_TOTALIVTT']>0) & (dot_skims['TNCIN_MIX_TOTALIVTT']>0) & (odt_skims['TNCOUT_MIX_XFERS']>0) & (dot_skims['TNCIN_MIX_XFERS']>0),
# commuter rail constants based on commuter rail IVTT,,,
,wlk_prm_out_cr_asc,"(-1.0) * (np.minimum(odt_skims['WALK_PRM_CMRIVTT'],60) + np.where(odt_skims['WALK_PRM_CMRIVTT']>40,(np.minimum(odt_skims['WALK_PRM_CMRIVTT'],60)-40)*0.6,0))",
,wlk_prm_inb_cr_asc,"(-1.0) * (np.minimum(dot_skims['WALK_PRM_CMRIVTT'],60) + np.where(dot_skims['WALK_PRM_CMRIVTT']>40,(np.minimum(dot_skims['WALK_PRM_CMRIVTT'],60)-40)*0.6,0))",
,wlk_mix_out_cr_asc,"(-1.0) * (np.minimum(odt_skims['WALK_MIX_CMRIVTT'],60) + np.where(odt_skims['WALK_MIX_CMRIVTT']>40,(np.minimum(odt_skims['WALK_MIX_CMRIVTT'],60)-40)*0.6,0))",
,wlk_mix_inb_cr_asc,"(-1.0) * (np.minimum(dot_skims['WALK_MIX_CMRIVTT'],60) + np.where(dot_skims['WALK_MIX_CMRIVTT']>40,(np.minimum(dot_skims['WALK_MIX_CMRIVTT'],60)-40)*0.6,0))",
,pnr_prm_out_cr_asc,"(-1.0) * np.minimum((45 + np.where(odt_skims['PNROUT_PRM_CMRIVTT']>20,(odt_skims['PNROUT_PRM_CMRIVTT']-20),0)+np.where(odt_skims['PNROUT_PRM_CMRIVTT']>40,(odt_skims['PNROUT_PRM_CMRIVTT']-40)*1.5,0)),65)",
,pnr_prm_inb_cr_asc,"(-1.0) * np.minimum((45 + np.where(dot_skims['PNRIN_PRM_CMRIVTT']>20,(dot_skims['PNRIN_PRM_CMRIVTT']-20),0)+np.where(dot_skims['PNRIN_PRM_CMRIVTT']>40,(dot_skims['PNRIN_PRM_CMRIVTT']-40)*1.5,0)),65)",
,pnr_mix_out_cr_asc,"(-1.0) * np.minimum((45 + np.where(odt_skims['PNROUT_MIX_CMRIVTT']>20,(odt_skims['PNROUT_MIX_CMRIVTT']-20),0)+np.where(odt_skims['PNROUT_MIX_CMRIVTT']>40,(odt_skims['PNROUT_MIX_CMRIVTT']-40)*1.5,0)),65)",
,pnr_mix_inb_cr_asc,"(-1.0) * np.minimum((45 + np.where(dot_skims['PNRIN_MIX_CMRIVTT']>20,(dot_skims['PNRIN_MIX_CMRIVTT']-20),0)+np.where(dot_skims['PNRIN_MIX_CMRIVTT']>40,(dot_skims['PNRIN_MIX_CMRIVTT']-40)*1.5,0)),65)",
,knr_prm_out_cr_asc,"(-1.0) * np.minimum((45 + np.where(odt_skims['KNROUT_PRM_CMRIVTT']>20,(odt_skims['KNROUT_PRM_CMRIVTT']-20),0)+np.where(odt_skims['KNROUT_PRM_CMRIVTT']>40,(odt_skims['KNROUT_PRM_CMRIVTT']-40)*1.5,0)),65)",
,knr_prm_inb_cr_asc,"(-1.0) * np.minimum((45 + np.where(dot_skims['KNRIN_PRM_CMRIVTT']>20,(dot_skims['KNRIN_PRM_CMRIVTT']-20),0)+np.where(dot_skims['KNRIN_PRM_CMRIVTT']>40,(dot_skims['KNRIN_PRM_CMRIVTT']-40)*1.5,0)),65)",
,knr_mix_out_cr_asc,"(-1.0) * np.minimum((45 + np.where(odt_skims['KNROUT_MIX_CMRIVTT']>20,(odt_skims['KNROUT_MIX_CMRIVTT']-20),0)+np.where(odt_skims['KNROUT_MIX_CMRIVTT']>40,(odt_skims['KNROUT_MIX_CMRIVTT']-40)*1.5,0)),65)",
,knr_mix_inb_cr_asc,"(-1.0) * np.minimum((45 + np.where(dot_skims['KNRIN_MIX_CMRIVTT']>20,(dot_skims['KNRIN_MIX_CMRIVTT']-20),0)+np.where(dot_skims['KNRIN_MIX_CMRIVTT']>40,(dot_skims['KNRIN_MIX_CMRIVTT']-40)*1.5,0)),65)",
,tnc_prm_out_cr_asc,"(-1.0) * np.minimum((45 + np.where(odt_skims['TNCOUT_PRM_CMRIVTT']>20,(odt_skims['TNCOUT_PRM_CMRIVTT']-20),0)+np.where(odt_skims['TNCOUT_PRM_CMRIVTT']>40,(odt_skims['TNCOUT_PRM_CMRIVTT']-40)*1.5,0)),65)",
,tnc_prm_inb_cr_asc,"(-1.0) * np.minimum((45 + np.where(dot_skims['TNCIN_PRM_CMRIVTT']>20,(dot_skims['TNCIN_PRM_CMRIVTT']-20),0)+np.where(dot_skims['TNCIN_PRM_CMRIVTT']>40,(dot_skims['TNCIN_PRM_CMRIVTT']-40)*1.5,0)),65)",
,tnc_mix_out_cr_asc,"(-1.0) * np.minimum((45 + np.where(odt_skims['TNCOUT_MIX_CMRIVTT']>20,(odt_skims['TNCOUT_MIX_CMRIVTT']-20),0)+np.where(odt_skims['TNCOUT_MIX_CMRIVTT']>40,(odt_skims['TNCOUT_MIX_CMRIVTT']-40)*1.5,0)),65)",
,tnc_mix_inb_cr_asc,"(-1.0) * np.minimum((45 + np.where(dot_skims['TNCIN_MIX_CMRIVTT']>20,(dot_skims['TNCIN_MIX_CMRIVTT']-20),0)+np.where(dot_skims['TNCIN_MIX_CMRIVTT']>40,(dot_skims['TNCIN_MIX_CMRIVTT']-40)*1.5,0)),65)",
# Note: Hyperloop not implemented in ASC calculations since we arent skimming hyperloop IVTT,,,
,wlk_prm_out_asc,"np.where(odt_skims['WALK_PRM_CMRIVTT'] > 10, wlk_prm_out_cr_asc,np.where(odt_skims['WALK_PRM_LRTIVTT']>0,lrt_equiv_asc,np.where(odt_skims['WALK_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['WALK_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,wlk_prm_inb_asc,"np.where(dot_skims['WALK_PRM_CMRIVTT'] > 10, wlk_prm_inb_cr_asc,np.where(dot_skims['WALK_PRM_LRTIVTT']>0,lrt_equiv_asc,np.where(dot_skims['WALK_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['WALK_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,pnr_prm_out_asc,"np.where(odt_skims['PNROUT_PRM_CMRIVTT'] > 10, pnr_prm_out_cr_asc,np.where(odt_skims['PNROUT_PRM_LRTIVTT']>0,lrt_equiv_asc,np.where(odt_skims['PNROUT_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['PNROUT_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,pnr_prm_inb_asc,"np.where(dot_skims['PNRIN_PRM_CMRIVTT'] > 10, pnr_prm_inb_cr_asc,np.where(dot_skims['PNRIN_PRM_LRTIVTT']>0,pnr_lrt_equiv_asc,np.where(dot_skims['PNRIN_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['PNRIN_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,knr_prm_out_asc,"np.where(odt_skims['KNROUT_PRM_CMRIVTT'] > 10, knr_prm_out_cr_asc,np.where(odt_skims['KNROUT_PRM_LRTIVTT']>0,lrt_equiv_asc,np.where(odt_skims['KNROUT_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['KNROUT_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,knr_prm_inb_asc,"np.where(dot_skims['KNRIN_PRM_CMRIVTT'] > 10, knr_prm_inb_cr_asc,np.where(dot_skims['KNRIN_PRM_LRTIVTT']>0,lrt_equiv_asc,np.where(dot_skims['KNRIN_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['KNRIN_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,tnc_prm_out_asc,"np.where(odt_skims['TNCOUT_PRM_CMRIVTT'] > 10, tnc_prm_out_cr_asc,np.where(odt_skims['TNCOUT_PRM_LRTIVTT']>0,lrt_equiv_asc,np.where(odt_skims['TNCOUT_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['TNCOUT_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,tnc_prm_inb_asc,"np.where(dot_skims['TNCIN_PRM_CMRIVTT'] > 10, tnc_prm_inb_cr_asc,np.where(dot_skims['TNCIN_PRM_LRTIVTT']>0,lrt_equiv_asc,np.where(dot_skims['TNCIN_PRM_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['TNCIN_PRM_LTDEXPIVTT'] > 0, eb_equiv_asc,0))))",
,wlk_mix_out_max_asc,"np.where(odt_skims['WALK_MIX_CMRIVTT'] > 10, wlk_mix_out_cr_asc,np.where(odt_skims['WALK_MIX_LRTIVTT']>0,lrt_equiv_asc,np.where(odt_skims['WALK_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['WALK_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
,wlk_mix_inb_max_asc,"np.where(dot_skims['WALK_MIX_CMRIVTT'] > 10, wlk_mix_inb_cr_asc,np.where(dot_skims['WALK_MIX_LRTIVTT']>0,lrt_equiv_asc,np.where(dot_skims['WALK_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['WALK_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
,pnr_mix_out_max_asc,"np.where(odt_skims['PNROUT_MIX_CMRIVTT'] > 10, pnr_mix_out_cr_asc,np.where(odt_skims['PNROUT_MIX_LRTIVTT']>0,pnr_lrt_equiv_asc,np.where(odt_skims['PNROUT_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['PNROUT_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
,pnr_mix_inb_max_asc,"np.where(dot_skims['PNRIN_MIX_CMRIVTT'] > 10, pnr_mix_inb_cr_asc,np.where(dot_skims['PNRIN_MIX_LRTIVTT']>0,pnr_lrt_equiv_asc,np.where(dot_skims['PNRIN_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['PNRIN_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
,knr_mix_out_max_asc,"np.where(odt_skims['KNROUT_MIX_CMRIVTT'] > 10,knr_mix_out_cr_asc,np.where(odt_skims['KNROUT_MIX_LRTIVTT']>0,lrt_equiv_asc,np.where(odt_skims['KNROUT_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['KNROUT_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
,knr_mix_inb_max_asc,"np.where(dot_skims['KNRIN_MIX_CMRIVTT'] > 10, knr_mix_inb_cr_asc,np.where(dot_skims['KNRIN_MIX_LRTIVTT']>0,lrt_equiv_asc,np.where(dot_skims['KNRIN_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['KNRIN_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
,tnc_mix_out_max_asc,"np.where(odt_skims['TNCOUT_MIX_CMRIVTT'] > 10, tnc_mix_out_cr_asc,np.where(odt_skims['TNCOUT_MIX_LRTIVTT']>0,lrt_equiv_asc,np.where(odt_skims['TNCOUT_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+odt_skims['TNCOUT_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
,tnc_mix_inb_max_asc,"np.where(dot_skims['TNCIN_MIX_CMRIVTT'] > 10, tnc_mix_inb_cr_asc,np.where(dot_skims['TNCIN_MIX_LRTIVTT']>0,lrt_equiv_asc,np.where(dot_skims['TNCIN_MIX_BRTIVTT']>0,brt_equiv_asc,np.where(odt_skims['WALK_PRM_EXPIVTT']+dot_skims['TNCIN_MIX_LTDEXPIVTT']> 0, eb_equiv_asc,0))))",
# reduce by 50% if bus transfer and constant is positive (PRM has no LB service),,,
,wlk_mix_out_asc,"np.where((wlk_mix_out_max_asc > 0) & (odt_skims['WALK_MIX_BUSIVTT'] > 0), 0.5 * wlk_mix_out_max_asc, wlk_mix_out_max_asc)",
,wlk_mix_inb_asc,"np.where((wlk_mix_inb_max_asc > 0) & (dot_skims['WALK_MIX_BUSIVTT'] > 0), 0.5 * wlk_mix_inb_max_asc, wlk_mix_inb_max_asc)",
,pnr_mix_out_asc,"np.where((pnr_mix_out_max_asc > 0) & (odt_skims['PNROUT_MIX_BUSIVTT'] > 0), 0.5 * pnr_mix_out_max_asc, pnr_mix_out_max_asc)",
,pnr_mix_inb_asc,"np.where((pnr_mix_inb_max_asc > 0) & (dot_skims['PNRIN_MIX_BUSIVTT'] > 0), 0.5 * pnr_mix_inb_max_asc, pnr_mix_inb_max_asc)",
,knr_mix_out_asc,"np.where((knr_mix_out_max_asc > 0) & (odt_skims['KNROUT_MIX_BUSIVTT'] > 0), 0.5 * knr_mix_out_max_asc, knr_mix_out_max_asc)",
,knr_mix_inb_asc,"np.where((knr_mix_inb_max_asc > 0) & (dot_skims['KNRIN_MIX_BUSIVTT'] > 0), 0.5 * knr_mix_inb_max_asc, knr_mix_inb_max_asc)",
,tnc_mix_out_asc,"np.where((tnc_mix_out_max_asc > 0) & (odt_skims['TNCOUT_MIX_BUSIVTT'] > 0), 0.5 * tnc_mix_out_max_asc, tnc_mix_out_max_asc)",
,tnc_mix_inb_asc,"np.where((tnc_mix_inb_max_asc > 0) & (dot_skims['TNCIN_MIX_BUSIVTT'] > 0), 0.5 * tnc_mix_inb_max_asc, tnc_mix_inb_max_asc)",
# reduce by 50% if transfers happen between cmr and other prm lines,,,
,wlk_prm_out_asc,"np.where((wlk_prm_out_asc > 0) & (odt_skims['WALK_PRM_XFERS'] > 0), 0.5 * wlk_prm_out_asc, wlk_prm_out_asc)",
,wlk_prm_inb_asc,"np.where((wlk_prm_inb_asc > 0) & (dot_skims['WALK_PRM_XFERS'] > 0), 0.5 * wlk_prm_inb_asc, wlk_prm_inb_asc)",
,pnr_prm_out_asc,"np.where((pnr_prm_out_asc > 0) & (odt_skims['PNROUT_PRM_XFERS'] > 0), 0.5 * pnr_prm_out_asc, pnr_prm_out_asc)",
,pnr_prm_inb_asc,"np.where((pnr_prm_inb_asc > 0) & (dot_skims['PNRIN_PRM_XFERS'] > 0), 0.5 * pnr_prm_inb_asc, pnr_prm_inb_asc)",
,knr_prm_out_asc,"np.where((knr_prm_out_asc > 0) & (odt_skims['KNROUT_PRM_XFERS'] > 0), 0.5 * knr_prm_out_asc, knr_prm_out_asc)",
,knr_prm_inb_asc,"np.where((knr_prm_inb_asc > 0) & (dot_skims['KNRIN_PRM_XFERS'] > 0), 0.5 * knr_prm_inb_asc, knr_prm_inb_asc)",
,tnc_prm_out_asc,"np.where((tnc_prm_out_asc > 0) & (odt_skims['TNCOUT_PRM_XFERS'] > 0), 0.5 * tnc_prm_out_asc, tnc_prm_out_asc)",
,tnc_prm_inb_asc,"np.where((tnc_prm_inb_asc > 0) & (dot_skims['TNCIN_PRM_XFERS'] > 0), 0.5 * tnc_prm_inb_asc, tnc_prm_inb_asc)",
# Micromobility times,,,
ebike time inbound,ebike_time_inb,bike_time_inb * bikeSpeed / ebikeSpeed,
ebike time outbound,ebike_time_out,bike_time_out * bikeSpeed / ebikeSpeed,
escooter time inbound,escooter_time_inb,bike_time_inb * bikeSpeed / escooterSpeed,
escooter time outbound,escooter_time_out,bike_time_out * bikeSpeed / escooterSpeed,
Micromobility access time outbound,micro_access_out,"reindex(land_use.MicroAccessTime,origin)",
Micromobility access time inbound,micro_access_inb,"reindex(land_use.MicroAccessTime,destination)",
ebike max distance availability,ebikeMaxDistance,(od_skims['DIST'] > ebikeMaxDist),
escooter max distance availability,escooterMaxDistance,(od_skims['DIST'] > escooterMaxDist),
# Microtransit and NEV,,,
microtransit available at origin,microtransit_orig,"reindex(land_use.microtransit, df[orig_col_name])",
microtransit available at destination,microtransit_dest,"reindex(land_use.microtransit, df[dest_col_name])",
microtransit operating at time of tour,microtransit_operating,True,
microtransit available,microtransit_available,(microtransit_orig > 0) & (microtransit_orig == microtransit_dest) & (s3_dist_skims_out < microtransitMaxDist) & (s3_dist_skims_inb < microtransitMaxDist) & microtransit_operating,
microtransit direct time,microtransit_direct_time,"np.maximum(s3_dist_skims_out/microtransitSpeed*60, s3_time_skims_out) + np.maximum(s3_dist_skims_inb/microtransitSpeed*60, s3_time_skims_inb)",
microtransit total time,microtransit_time,"np.maximum(microtransit_direct_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_direct_time)",
nev available at origin,nev_orig,"reindex(land_use.nev, df[orig_col_name])",
nev available at destination,nev_dest,"reindex(land_use.nev, df[dest_col_name])",
nev operating at time of tour,nev_operating,True,
nev available,nev_available,(nev_orig > 0) & (nev_orig == nev_dest) & (s3_dist_skims_out < nevMaxDist) & (s3_dist_skims_inb < nevMaxDist) & nev_operating,
nev direct time,nev_direct_time,"np.maximum(s3_dist_skims_out/nevSpeed*60, s3_time_skims_out) + np.maximum(s3_dist_skims_inb/nevSpeed*60, s3_time_skims_inb)",
nev total time,nev_time,"np.maximum(nev_direct_time + nevDiversionConstant, nevDiversionFactor*nev_direct_time)",
# Microtransit and NEV access to transit,,,
microtransit access to local available,microtransit_local_access_available,(microtransit_orig>0) & (origin_micro_local_dist<microtransitMaxDist) & microtransit_operating,
microtransit direct access to local time,microtransit_local_direct_access_time,"(origin_micro_local_dist/microtransitSpeed*60) + (origin_micro_local_dist/microtransitSpeed*60)",
microtransit access to local time,microtransit_local_access_time,"np.maximum(microtransit_local_direct_access_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_local_direct_access_time)",
nev access to local available,nev_local_access_available,(nev_orig>0) & (origin_micro_local_dist<nevMaxDist) & nev_operating,
nev direct access to local time,nev_local_direct_access_time,"(origin_micro_local_dist/nevSpeed*60) + (origin_micro_local_dist/nevSpeed*60)",
nev access to local time,nev_local_access_time,"np.maximum(nev_local_direct_access_time + nevDiversionConstant, nevDiversionFactor*nev_local_direct_access_time)",
#,,,
microtransit access to premium available,microtransit_prm_access_available,(microtransit_orig>0) & (origin_micro_prm_dist<microtransitMaxDist) & microtransit_operating,
microtransit direct access to premium time,microtransit_prm_direct_access_time,"(origin_micro_prm_dist/microtransitSpeed*60) + (origin_micro_prm_dist/microtransitSpeed*60)",
microtransit access to premium time,microtransit_prm_access_time,"np.maximum(microtransit_prm_direct_access_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_prm_direct_access_time)",
nev access to premium available,nev_prm_access_available,(nev_orig>0) & (origin_micro_prm_dist<nevMaxDist) & nev_operating,
nev direct access to premium time,nev_prm_direct_access_time,"(origin_micro_prm_dist/nevSpeed*60) + (origin_micro_prm_dist/nevSpeed*60)",
nev access to premium time,nev_prm_access_time,"np.maximum(nev_prm_direct_access_time + nevDiversionConstant, nevDiversionFactor*nev_prm_direct_access_time)",
#,,,
microtransit access to mixed available,microtransit_mix_access_available,(microtransit_orig>0) & (origin_micro_mix_dist<microtransitMaxDist) & microtransit_operating,
microtransit direct access to mixed time,microtransit_mix_direct_access_time,"(origin_micro_mix_dist/microtransitSpeed*60) + (origin_micro_mix_dist/microtransitSpeed*60)",
microtransit access to mixed time,microtransit_mix_access_time,"np.maximum(microtransit_mix_direct_access_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_mix_direct_access_time)",
nev access to mixed available,nev_mix_access_available,(nev_orig>0) & (origin_micro_mix_dist<nevMaxDist) & nev_operating,
nev direct access to mixed time,nev_mix_direct_access_time,"(origin_micro_mix_dist/nevSpeed*60) + (origin_micro_mix_dist/nevSpeed*60)",
nev access to mixed time,nev_mix_access_time,"np.maximum(nev_mix_direct_access_time + nevDiversionConstant, nevDiversionFactor*nev_mix_direct_access_time)",
# Microtransit and NEV egress from transit,,,
microtransit egress from local available,microtransit_local_egress_available,(microtransit_dest>0) & (dest_micro_local_dist>maxWalkIfMTAccessAvailable) & (dest_micro_local_dist<microtransitMaxDist) & microtransit_operating,
microtransit direct egress from local time,microtransit_local_direct_egress_time,"(dest_micro_local_dist/microtransitSpeed*60) + (dest_micro_local_dist/microtransitSpeed*60)",
microtransit egress from local time,microtransit_local_egress_time,"np.maximum(microtransit_local_direct_egress_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_local_direct_egress_time)",
nev egress from local available,nev_local_egress_available,(nev_dest>0) & (dest_micro_local_dist>maxWalkIfMTAccessAvailable) & (dest_micro_local_dist<nevMaxDist) & nev_operating,
nev direct egress from local time,nev_local_direct_egress_time,"(dest_micro_local_dist/nevSpeed*60) + (dest_micro_local_dist/nevSpeed*60)",
nev egress from local time,nev_local_egress_time,"np.maximum(nev_local_direct_egress_time + nevDiversionConstant, nevDiversionFactor*nev_local_direct_egress_time)",
#,,,
microtransit egress from premium available,microtransit_prm_egress_available,(microtransit_dest>0) & (dest_micro_prm_dist>maxWalkIfMTAccessAvailable) & (dest_micro_prm_dist<microtransitMaxDist) & microtransit_operating,
microtransit direct egress from premium time,microtransit_prm_direct_egress_time,"(dest_micro_prm_dist/microtransitSpeed*60) + (dest_micro_prm_dist/microtransitSpeed*60)",
microtransit egress from premium time,microtransit_prm_egress_time,"np.maximum(microtransit_prm_direct_egress_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_prm_direct_egress_time)",
nev egress from premium available,nev_prm_egress_available,(nev_dest>0) & (dest_micro_prm_dist>maxWalkIfMTAccessAvailable) & (dest_micro_prm_dist<nevMaxDist) & nev_operating,
nev direct egress from premium time,nev_prm_direct_egress_time,"(dest_micro_prm_dist/nevSpeed*60) + (dest_micro_prm_dist/nevSpeed*60)",
nev egress from premium time,nev_prm_egress_time,"np.maximum(nev_prm_direct_egress_time + nevDiversionConstant, nevDiversionFactor*nev_prm_direct_egress_time)",
#,,,
microtransit egress from mixed available,microtransit_mix_egress_available,(microtransit_dest>0) & (dest_micro_mix_dist>maxWalkIfMTAccessAvailable) & (dest_micro_mix_dist<microtransitMaxDist) & microtransit_operating,
microtransit direct egress from mixed time,microtransit_mix_direct_egress_time,"(dest_micro_mix_dist/microtransitSpeed*60) + (dest_micro_mix_dist/microtransitSpeed*60)",
microtransit egress from mixed time,microtransit_mix_egress_time,"np.maximum(microtransit_mix_direct_egress_time + microtransitDiversionConstant, microtransitDiversionFactor*microtransit_mix_direct_egress_time)",
nev egress from mixed available,nev_mix_egress_available,(nev_dest>0) & (dest_micro_mix_dist>maxWalkIfMTAccessAvailable) & (dest_micro_mix_dist<nevMaxDist) & nev_operating,
nev direct egress from mixed time,nev_mix_direct_egress_time,"(dest_micro_mix_dist/nevSpeed*60) + (dest_micro_mix_dist/nevSpeed*60)",
nev egress from mixed time,nev_mix_egress_time,"np.maximum(nev_mix_direct_egress_time + nevDiversionConstant, nevDiversionFactor*nev_mix_direct_egress_time)",
# Additional transfers from microtransit and NEV,,,
microtransit/nev access transfer,mtnev_acc_xfer,microtransit_local_access_available | microtransit_prm_access_available | microtransit_mix_access_available | nev_local_access_available | nev_prm_access_available | nev_mix_access_available,
microtransit/nev egress transfer,mtnev_egr_xfer,microtransit_local_egress_available | microtransit_prm_egress_available | microtransit_mix_egress_available | nev_local_egress_available | nev_prm_egress_available | nev_mix_egress_available,
# transit subsidi pass discount,,,
transit pas subsidy,transit_pass_subsidy,"df.get('transit_pass_subsidy', False)",
transit pass ownership,transit_pass_ownership,"df.get('transit_pass_ownership', False)",
transit subsidi pass discount, transitSubsidyPassDiscount,"np.where(transit_pass_subsidy | transit_pass_ownership,0,1)",