Description,Target,Expression
#,, annotate households table after import
,_PERSON_COUNT,"lambda query, persons, households: persons.query(query).groupby('household_id').size().reindex(households.index).fillna(0).astype(np.int8)"
#,,FIXME households.income can be negative  - so we clip?
income_in_thousands,income_in_thousands,(households.income / 1000).clip(lower=0)
income_segment,income_segment,"pd.cut(income_in_thousands, bins=[-np.inf, 30, 60, 100, np.inf], labels=[INCOME_SEGMENT_LOW, INCOME_SEGMENT_MED, INCOME_SEGMENT_HIGH, INCOME_SEGMENT_VERYHIGH]).astype(int)"
#,,
number of non_workers,num_non_workers,households.hhsize - households.num_workers
#,,
#,,we assume that everyone 16 and older is a potential driver
number of drivers,num_drivers,"_PERSON_COUNT('16 <= age', persons, households)"
num_adults,num_adults,"_PERSON_COUNT('age >= 18', persons, households)"
num_children,num_children,"_PERSON_COUNT('age < 18', persons, households)"
num_young_children,num_young_children,"_PERSON_COUNT('age <= 5', persons, households)"
num_children_6_to_12,num_children_6_to_12,"_PERSON_COUNT('6 <= age <= 12', persons, households)"
num_children_5_to_15,num_children_5_to_15,"_PERSON_COUNT('5 <= age <= 15', persons, households)"
num_children_16_to_17,num_children_16_to_17,"_PERSON_COUNT('16 <= age <= 17', persons, households)"
num_gradeschool,num_gradeschool,"_PERSON_COUNT('6 <= age <= 17', persons, households)"
num_highschool,num_highschool,"_PERSON_COUNT('14 <= age <= 17', persons, households)"
num_college_age,num_college_age,"_PERSON_COUNT('18 <= age <= 24', persons, households)"
num_young_adults,num_young_adults,"_PERSON_COUNT('25 <= age <= 34', persons, households)"
number of pre-driving age children in the household,num_predrive_child,"_PERSON_COUNT('ptype == 7', persons, households)"
number of non-working adult in the household,num_nonworker_adults,"_PERSON_COUNT('ptype == 4', persons, households)"
number of university students in the household,num_university_students,"_PERSON_COUNT('ptype == 3', persons, households)"
number of full time workers,num_fullTime_workers,"_PERSON_COUNT('is_fulltime_worker', persons, households)"
number of part time workers,num_partTime_workers,"_PERSON_COUNT('is_parttime_worker', persons, households)"
number of retired adults in the household,num_retired_adults,"_PERSON_COUNT('ptype == 5', persons, households)"
num_highschool_graduates,num_highschool_graduates,"_PERSON_COUNT('9 <= educ', persons, households)"
# Used in auto ownership,,
,num_children_6_to_15,"_PERSON_COUNT('6 <= age <= 15', persons, households)"
,num_young_retirees,"_PERSON_COUNT('65 <= age <= 79', persons, households)"
,num_old_retirees,"_PERSON_COUNT('80 <= age', persons, households)"
#,,
non_family,non_family,households.HHT.isin(HHT_NONFAMILY)
family,family,households.HHT.isin(HHT_FAMILY)
#,,FIXME is this the best replacement for area_type??
home_is_urban,home_is_urban,"reindex(land_use.pseudomsa, households.home_zone_id) <= urban_threshold"
home_is_rural,home_is_rural,"reindex(land_use.pseudomsa, households.home_zone_id) > rural_threshold"
#,,
,num_hh_in_zone,"reindex(households.groupby('home_zone_id').size(), households.home_zone_id)"
#,multiple_auto_hh_in_zone,"reindex_i(df.groupby('home_zone_id').multiple_auto_hh.sum(), df.index)"
#,multiple_auto_hh_in_zone_share,multiple_auto_hh_in_zone/num_hh_in_zone
hh owns an ebike,ebike_owner,"rng.random_for_df(households)[:,0] < ebikeownership"