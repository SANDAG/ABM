Description,Target,Expression
#,, annotate persons table after workplace_location model has run
,workplace_zone_id,"np.where(persons.get('external_workplace_zone_id',-1) > 0, persons.get('external_workplace_zone_id',-1), persons.workplace_zone_id)"
,workplace_location_logsum,"np.where(persons.get('external_workplace_zone_id',-1) > 0, persons.get('external_workplace_location_logsum',-1), persons.workplace_location_logsum)"
,workplace_modechoice_logsum,"np.where(persons.get('external_workplace_zone_id',-1) > 0, persons.get('external_workplace_modechoice_logsum',-1), persons.workplace_modechoice_logsum)"
,distance_to_work,"np.where(workplace_zone_id>=0,skim_dict.lookup(persons.home_zone_id, workplace_zone_id, 'DIST'),np.nan)"
workplace_in_cbd,workplace_in_cbd,"reindex(land_use.pseudomsa, persons.workplace_zone_id) < cbd_threshold"
work_zone_area_type,work_zone_area_type,"reindex(land_use.pseudomsa, persons.workplace_zone_id)"
#,, auto time to work - free flow travel time in both directions. MTC TM1 was MD and MD
#,,roundtrip_auto_time_to_work
,auto_time_home_to_work,"skim_dict.lookup(persons.home_zone_id, workplace_zone_id, ('SOV_TR_M_TIME', 'AM'))"
,_auto_time_work_to_home,"skim_dict.lookup(workplace_zone_id, persons.home_zone_id, ('SOV_TR_M_TIME', 'PM'))"
,roundtrip_auto_time_to_work,"np.where(workplace_zone_id>=0, auto_time_home_to_work + _auto_time_work_to_home,0)"
# calculating work_auto_savings for transit pass ownership,,
,_transit_ivt_home_to_work,"skim_dict.lookup(persons.home_zone_id, persons.workplace_zone_id, ('WALK_LOC_TOTALIVTT', 'MD'))"
,_transit_ivt_work_to_home,"skim_dict.lookup(persons.workplace_zone_id, persons.home_zone_id, ('WALK_LOC_TOTALIVTT', 'MD'))"
,_work_transit_available,(_transit_ivt_home_to_work > 0) & (_transit_ivt_work_to_home > 0)
,_transit_iwait,"skim_dict.lookup(persons.home_zone_id, persons.workplace_zone_id, ('WALK_LOC_FIRSTWAIT', 'MD')) + skim_dict.lookup(persons.workplace_zone_id, persons.home_zone_id, ('WALK_LOC_FIRSTWAIT', 'MD'))"
,_transit_xwait,"skim_dict.lookup(persons.home_zone_id, persons.workplace_zone_id, ('WALK_LOC_XFERWAIT', 'MD')) + skim_dict.lookup(persons.workplace_zone_id, persons.home_zone_id, ('WALK_LOC_XFERWAIT', 'MD'))"
,_transit_waux,"skim_dict.lookup(persons.home_zone_id, persons.workplace_zone_id, ('WALK_LOC_XFERWALK', 'MD')) + skim_dict.lookup(persons.workplace_zone_id, persons.home_zone_id, ('WALK_LOC_XFERWALK', 'MD'))"
,_transit_wacc_home,"reindex(land_use.walk_dist_local_bus, persons.home_zone_id) if 'walk_dist_local_bus' in land_use else shortWalk"
,_transit_wacc_work,"reindex(land_use.walk_dist_local_bus, persons.workplace_zone_id) if 'walk_dist_local_bus' in land_use else shortWalk"
round trip walk access & egress,_transit_wacc_tot, 2 * (_transit_wacc_home + _transit_wacc_work) * 60 / walkSpeed
,_roundtrip_transit_time_to_work,_transit_ivt_home_to_work + _transit_ivt_work_to_home + _transit_iwait + _transit_xwait + _transit_waux + _transit_wacc_tot
#,,work_auto_savings_ratio
,_min_work_walk_transit,"np.where(_work_transit_available, np.minimum(_roundtrip_transit_time_to_work, roundtrip_auto_time_to_work), roundtrip_auto_time_to_work)"
,work_auto_savings,"np.where(persons.is_worker, _min_work_walk_transit - roundtrip_auto_time_to_work, 0)"
Parking cost at work,exp_daily_work,"reindex(land_use.exp_daily, df.workplace_zone_id).fillna(0)"
# calculating toll and non-toll costs for transponder ownership model,,
,non_toll_time_work,"np.where(df.workplace_zone_id >= 0, skim_dict.lookup(df.home_zone_id, df.workplace_zone_id, ('SOV_NT_L_TIME', 'AM')), 0)"
,toll_time_work,"np.where(df.workplace_zone_id >= 0, skim_dict.lookup(df.home_zone_id, df.workplace_zone_id, ('SOV_TR_H_TIME', 'AM')), 0)"
,toll_dist_work,"np.where(df.workplace_zone_id >= 0, skim_dict.lookup(df.home_zone_id, df.workplace_zone_id, ('SOV_TR_H_TOLLDIST', 'AM')), 0)"
,toll_cost_work,"np.where(df.workplace_zone_id >= 0, skim_dict.lookup(df.home_zone_id, df.workplace_zone_id, ('SOV_TR_H_TOLLCOST', 'AM')), 0)"
,toll_travel_time_savings_work,non_toll_time_work - toll_time_work