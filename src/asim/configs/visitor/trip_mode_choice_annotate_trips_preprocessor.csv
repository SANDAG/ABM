Description,Target,Expression
tour duration in hours,duration_hours,df['duration'] / PERIODS_PER_HOUR
,_TOURS_HAVE_DEST,'destination' in tours.columns
park-n-ride transfer cost,coef_xfers_pnr,coef_ivt*15
cost coefficient by income segment,coef_cost,"np.select([df.income == 0, df.income == 1,df. income == 2, df.income > 2], [coef_cost_low, coef_cost_med, coef_cost_high, coef_cost_vhigh])"
,tour_mode_is_da,df.tour_mode == 'DRIVEALONE'
,tour_mode_is_s2,df.tour_mode == 'SHARED2'
,tour_mode_is_s3,df.tour_mode == 'SHARED3'
,tour_mode_is_walk,df.tour_mode == 'WALK'
vot bins,vot_da,coef_ivt / coef_cost * 0.6
#,vot_s2,vot_da * cost_share_s2
#,vot_s3,vot_da * cost_share_s3
# No shared cost in visitor model,,
,vot_s2,vot_da
,vot_s3,vot_da
,_vot_bin_da,"np.where(vot_da < vot_threshold_low, 1, np.where(vot_da < vot_threshold_med, 2, 3))"
,_vot_bin_s2,"np.where(vot_s2 < vot_threshold_low, 1, np.where(vot_s2 < vot_threshold_med, 2, 3))"
,_vot_bin_s3,"np.where(vot_s3 < vot_threshold_low, 1, np.where(vot_s3 < vot_threshold_med, 2, 3))"
vot-indexed skims,da_dist_skims,((odt_skims['SOV_NT_L_DIST'] * (_vot_bin_da == 1)) + (odt_skims['SOV_NT_M_DIST'] * (_vot_bin_da == 2)) + (odt_skims['SOV_NT_H_DIST'] * (_vot_bin_da == 3)))
,da_cost_skims,((odt_skims['SOV_NT_L_TOLLCOST'] * (_vot_bin_da == 1)) + (odt_skims['SOV_NT_M_TOLLCOST'] * (_vot_bin_da == 2)) + (odt_skims['SOV_NT_H_TOLLCOST'] * (_vot_bin_da == 3)))
,da_time_skims,((odt_skims['SOV_NT_L_TIME'] * (_vot_bin_da == 1)) + (odt_skims['SOV_NT_M_TIME'] * (_vot_bin_da == 2)) + (odt_skims['SOV_NT_H_TIME'] * (_vot_bin_da == 3)))
,s2_dist_skims,((odt_skims['HOV2_L_DIST'] * (_vot_bin_s2 == 1)) + (odt_skims['HOV2_M_DIST'] * (_vot_bin_s2 == 2)) + (odt_skims['HOV2_H_DIST'] * (_vot_bin_s2 == 3)))
,s2_cost_skims,((odt_skims['HOV2_L_TOLLCOST'] * (_vot_bin_s2 == 1)) + (odt_skims['HOV2_M_TOLLCOST'] * (_vot_bin_s2 == 2)) + (odt_skims['HOV2_H_TOLLCOST'] * (_vot_bin_s2 == 3)))
,s2_time_skims,((odt_skims['HOV2_L_TIME'] * (_vot_bin_s2 == 1)) + (odt_skims['HOV2_M_TIME'] * (_vot_bin_s2 == 2)) + (odt_skims['HOV2_H_TIME'] * (_vot_bin_s2 == 3)))
,s3_dist_skims,((odt_skims['HOV3_L_DIST'] * (_vot_bin_s3 == 1)) + (odt_skims['HOV3_M_DIST'] * (_vot_bin_s3 == 2)) + (odt_skims['HOV3_H_DIST'] * (_vot_bin_s3 == 3)))
,s3_cost_skims,((odt_skims['HOV3_L_TOLLCOST'] * (_vot_bin_s3 == 1)) + (odt_skims['HOV3_M_TOLLCOST'] * (_vot_bin_s3 == 2)) + (odt_skims['HOV3_H_TOLLCOST'] * (_vot_bin_s3 == 3)))
,s3_time_skims,((odt_skims['HOV3_L_TIME'] * (_vot_bin_s3 == 1)) + (odt_skims['HOV3_M_TIME'] * (_vot_bin_s3 == 2)) + (odt_skims['HOV3_H_TIME'] * (_vot_bin_s3 == 3)))
for tour_od_choice logsums read tour_dest from trips table,tour_dest,"reindex(tours.destination, df.tour_id) if _TOURS_HAVE_DEST else df.tour_destination"
intermediate outbound stops on tour,out_stops,df['stop_frequency'].str[0].astype(int)
intermediate inbound stops on tour,in_stops,df['stop_frequency'].str[5].astype(int)
total intermediate stops,tot_stops,out_stops + in_stops
,tot_trips,tot_stops + 2
first trip of tour,first_trip,(df.trip_num == 1) & (df.outbound == True)
last trip of tour,last_trip,(df.trip_num == df.trip_count) & (df.outbound == False)
,first_of_multi_trips,(out_stops > 0) & first_trip
,last_of_multi_trips,(in_stops > 0) & last_trip
,trip_orig_is_tour_dest,df.origin == tour_dest
,trip_dest_is_tour_dest,df.destination == tour_dest
sandag costs need to be in cents,park_cost_day,"reindex(land_use.dparkcost, tour_dest) * 100"
,park_cost_hour,"reindex(land_use.hparkcost, tour_dest) * 100"
,park_cost_month,"reindex(land_use.mparkcost, tour_dest) * 100"
effective parking cost,park_cost_prim_dest,"pd.concat((park_cost_day, park_cost_hour * duration_hours), axis=1).min(axis=1)"
,park_cost_tour_dest_contrib,park_cost_prim_dest / tot_trips
,park_cost_trip_orig,"reindex(land_use.hparkcost, df[ORIGIN]) * 100"
,park_cost_trip_dest,"reindex(land_use.hparkcost, df[DESTINATION]) * 100"
,park_cost_trip_orig_contrib,((1 - first_trip) * (1 - trip_orig_is_tour_dest)) * (park_cost_trip_orig / 2) + (trip_orig_is_tour_dest * (park_cost_tour_dest_contrib / (tot_trips + 2)))
,park_cost_trip_dest_contrib,((1 - last_trip) * (1 - trip_dest_is_tour_dest)) * (park_cost_trip_dest / 2) + (trip_dest_is_tour_dest * (park_cost_tour_dest_contrib / (tot_trips + 2)))
,parking_cost,park_cost_tour_dest_contrib + park_cost_trip_orig_contrib + park_cost_trip_dest_contrib
#Divisor for cost sharing of SR2 trips,cost_share_s2,2
#Divisor for cost sharing of SR3+ trips,cost_share_s3,3
wait times,density_measure,"reindex(land_use.PopEmpDenPerMi, df[ORIGIN])"
,density_bin,"pd.cut(density_measure, bins=[-np.inf] + wait_time_distribution_by_density_breaks + [np.inf], labels=[1,2,3,4,5]).astype(int)"
,taxi_wait_time_mean,"density_bin.map({k: v for k,v in taxi_wait_time_mean_by_density.items()})"
,taxi_wait_time_sd,"density_bin.map({k: v for k,v in taxi_wait_time_sd_by_density.items()})"
,tnc_single_wait_time_mean,"density_bin.map({k: v for k,v in tnc_single_wait_time_mean_by_density.items()})"
,tnc_single_wait_time_sd,"density_bin.map({k: v for k,v in tnc_single_wait_time_sd_by_density.items()})"
,tnc_shared_wait_time_mean,"density_bin.map({k: v for k,v in tnc_shared_wait_time_mean_by_density.items()})"
,tnc_shared_wait_time_sd,"density_bin.map({k: v for k,v in tnc_shared_wait_time_sd_by_density.items()})"
,taxi_wait_time,"rng.lognormal_for_df(df.set_index('tour_id'), mu=taxi_wait_time_mean.values, sigma=taxi_wait_time_sd.values, broadcast=True, scale=True).set_axis(df.index, axis='index')"
,tnc_single_wait_time,"rng.lognormal_for_df(df.set_index('tour_id'), mu=tnc_single_wait_time_mean.values, sigma=tnc_single_wait_time_sd.values, broadcast=True, scale=True).set_axis(df.index, axis='index')"
,tnc_shared_wait_time,"rng.lognormal_for_df(df.set_index('tour_id'), mu=tnc_shared_wait_time_mean.values, sigma=tnc_shared_wait_time_sd.values, broadcast=True, scale=True).set_axis(df.index, axis='index')"
,purpose_id,df.purpose_id
is work tour,is_work,"np.where(purpose_id==0,1,0)"
is recreation tour,is_recreation,"np.where(purpose_id==1,1,0)"
is dining tour,is_dining,"np.where(purpose_id==2,1,0)"
,walk_time,od_skims['walkTime']
,walk_available,"np.where((walk_time < max_walk_time) & (walk_time > 0), 1, 0)"
,walk_transit_available,(odt_skims['WALK_MIX_TOTALIVTT'] > 0)
,bike_time,od_skims['bikeTime']
,bike_available,"np.where((bike_time < max_bike_time) & (bike_time > 0), 1, 0)"
,da_available,"np.where(df.auto_available & (df.number_of_participants == 1), 1, 0)"
,s2_available,"np.where(df.auto_available & (df.number_of_participants == 2), 1, 0)"
,s3_available,"np.where(df.auto_available & (df.number_of_participants >= 3), 1, 0)"
,tourDA,"np.where(df.tour_mode=='DA',1,0)"
,tourS2,"np.where(df.tour_mode=='SHARED2',1,0)"
,tourS3,"np.where(df.tour_mode=='SHARED3',1,0)"
,tourWalk,"np.where(df.tour_mode=='WALK',1,0)"
,tourBike,"np.where(df.tour_mode=='BIKE',1,0)"
,tourWalkTransit,"np.where(df.tour_mode=='WALK_TRANSIT',1,0)"
#Use AV coefficients for tour,useAV,df.useOwnedAV
#Auto IVT Factor,autoIVTFactor,"np.where(useAV==0,1.0,autoIVTFactorAV)"
placeholder Auto IVT Factor,autoIVTFactor,1
#Auto Parking Cost Factor,autoParkingCostFactor,"np.where(useAV==0,1.0,autoParkingCostFactorAV)"
placeholder for missing autoParkingCostFactorAV,autoParkingCostFactor,1
#Auto CPM Factor,autoCPMFactor,"np.where(useAV==0,1.0,autoCostPerMileFactorAV)"
placeholder for missing autoCostPerMileFactorAV,autoCPMFactor,1
#Auto Terminal Time Factor,autoTermTimeFactor,"np.where(useAV==0,1.0,autoTerminalTimeFactorAV)"
placeholder for missing autoTerminalTimeFactorAV,autoTermTimeFactor,1
# PLACEHOLDER
,time_factor,1.0