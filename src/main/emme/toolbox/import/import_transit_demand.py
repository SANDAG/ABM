#//////////////////////////////////////////////////////////////////////////////
#////                                                                       ///
#//// Copyright INRO, 2016-2017.                                            ///
#//// Rights to use and modify are granted to the                           ///
#//// San Diego Association of Governments and partner agencies.            ///
#//// This copyright notice must be preserved.                              ///
#////                                                                       ///
#//// import/import_transit_demand.py                                       ///
#////                                                                       ///
#////                                                                       ///
#////                                                                       ///
#////                                                                       ///
#//////////////////////////////////////////////////////////////////////////////
#
# Imports the transit demand generated from an iteration of the disaggregate 
# demand models (ActivitySim) in preparation for the transit assignment
# 
# Note the matrix name mapping from the OMX file names to the Emme database names.
#
# Inputs:
#    output_dir: output directory to read the OMX files from
#    scenario: transit scenario to use for reference zone system
#
# Files referenced:
#    Note: pp is time period, one of EA, AM, MD, PM, EV
#    output/tranTrips_pp.omx
#    output/tranCrossBorderTrips_pp.omx
#    output/tranAirportTrips.SAN_pp.omx
#    output/tranAirportTrips.CBX_pp.omx (optional)
#    output/tranVisitorTrips_pp.omx
#    output/tranInternalExternalTrips_pp.omx
#
# Matrix results:
#    Note: pp is time period, one of EA, AM, MD, PM, EV
#    pp_WLKBUS, pp_WLKLRT, pp_WLKCMR, pp_WLKEXP, pp_WLKBRT, 
#    pp_PNRBUS, pp_PNRLRT, pp_PNRCMR, pp_PNREXP, pp_PNRBRT, 
#    pp_KNRBUS, pp_KNRLRT, pp_KNRCMR, pp_KNREXP, pp_KNRBRT
#
# Script example:
"""
    import os
    modeller = inro.modeller.Modeller()
    main_directory = os.path.dirname(os.path.dirname(modeller.desktop.project.path))
    output_dir = os.path.join(main_directory, "output")
    scenario = modeller.scenario
    import_transit_demand = modeller.tool("sandag.import.import_transit_demand")
    import_transit_demand(output_dir, scenario)
"""


TOOLBOX_ORDER = 14


import inro.modeller as _m
import inro.emme.database.emmebank as _eb
import inro.emme.matrix as _matrix
import traceback as _traceback
import os


dem_utils = _m.Modeller().module('sandag.utilities.demand')
gen_utils = _m.Modeller().module("sandag.utilities.general")


class ImportMatrices(_m.Tool(), gen_utils.Snapshot):

    output_dir = _m.Attribute(unicode)
    
    tool_run_msg = ""

    @_m.method(return_type=_m.UnicodeType)
    def tool_run_msg_status(self):
        return self.tool_run_msg

    def __init__(self):
        project_dir = os.path.dirname(_m.Modeller().desktop.project.path)
        main_dir = os.path.dirname(project_dir)
        self.output_dir = os.path.join(main_dir, "output")
        self.attributes = ["output_dir"]

    def page(self):
        pb = _m.ToolPageBuilder(self)
        pb.title = "Import transit demand"
        pb.description = """ 
<div style="text-align:left">    
    Imports the trip matrices generated by CT-RAMP in OMX format. <br>
    A total of 30 OMX files are expected, for 5 time periods
    EA, AM, MD, PM and EV, with internal matrices by 3 model segments 
    (assignment access sets) and 3 access modes (walk, PNR, KNR):
    <ul>
        <li>tranTrips_pp.omx</li>
        <li>tranCrossBorderTrips_pp.omx</li>
        <li>tranAirportTrips.SAN_pp.omx</li>
        <li>tranAirportTrips.CBX_pp.omx (optional)</li>
        <li>tranVisitorTrips_pp.omx</li>
        <li>tranInternalExternalTrips_pp.omx</li>
    </ul>
</div>
        """
        pb.branding_text = "- SANDAG - Model"

        if self.tool_run_msg != "":
            pb.tool_run_status(self.tool_run_msg_status)
        pb.add_select_file('output_dir', 'directory',
                           title='Select output directory')
        return pb.render()

    def run(self):
        self.tool_run_msg = ""
        try:
            base_scenario = _m.Modeller().scenario
            transit_scenario_dict = {}
            transit_emmebank_dict = {}
            periods = ["EA", "AM", "MD", "PM", "EV"]
            project_dir = os.path.dirname(_m.Modeller().desktop.project.path)
            for period in periods:
                transit_emmebank_dict[period] = _eb.Emmebank(os.path.join(project_dir, "Database_transit_" + period, "emmebank"))
                transit_scenario_dict[period] = transit_emmebank_dict[period].scenario(base_scenario.number)
            self(self.output_dir, transit_scenario_dict)
            run_msg = "Tool completed"
            self.tool_run_msg = _m.PageBuilder.format_info(run_msg, escape=False)
        except Exception as error:
            self.tool_run_msg = _m.PageBuilder.format_exception(
                error, _traceback.format_exc(error))
            raise

    @_m.logbook_trace("Create TOD transit trip tables", save_arguments=True)
    def __call__(self, output_dir, scenario_dict):
        attributes = {"output_dir": output_dir}
        gen_utils.log_snapshot("Sum demand", str(self), attributes)

        self.scenario_dict = scenario_dict
        self.output_dir = output_dir
        self.import_transit_trips()

    @_m.logbook_trace("Import ActivitySim transit trips from OMX")
    def import_transit_trips(self):
        # emmebank = self.scenario.emmebank
        # emme_zones = self.scenario.zone_numbers
        matrix_name_tmplts = [
            ("mf%s_%s_LOC", "%s_%s_set1_%s"),
            ("mf%s_%s_PRM", "%s_%s_set2_%s"),
            ("mf%s_%s_MIX", "%s_%s_set3_%s")
        ]
        periods = ["EA", "AM", "MD", "PM", "EV"]
        access_modes = ["WALK", "PNROUT", "PNRIN", "KNROUT", "KNRIN"] #"WALK",
        matrix_names = []
        for period in periods:
            for acc_mode in access_modes:
                #for trip_set in trip_sets:
                for emme_name, omx_name in matrix_name_tmplts:
                    matrix_names.append(
                        ("_" + period, emme_name % (period, acc_mode), omx_name % (acc_mode, "%s", period)))
                        
        with gen_utils.OMXManager(self.output_dir, "tran%sTrips%s.omx") as omx_manager:
            for period, matrix_name, omx_key in matrix_names:
                logbook_label = "Report on import from OMX key %s to matrix %s" % (omx_key %"SET", matrix_name)

                emmebank = self.scenario_dict[period[1:]].emmebank
                
                #add both KNR_SET and TNC_SET into KNR
                # if ("KNR" in matrix_name):
                #     #resident
                #     person_knr_demand = omx_manager.lookup(("", period), omx_key)
                #     person_tnc_Demand = omx_manager.lookup(("", period), omx_key.replace("KNR","TNC") % "SET")
                #     person_demand = person_knr_demand + person_tnc_Demand
                #     #visitor
                #     visitor_knr_demand = omx_manager.lookup(("Visitor", period), omx_key % "SET")
                #     visitor_tnc_Demand = omx_manager.lookup(("Visitor", period), omx_key.replace("KNR","TNC") % "SET")
                #     visitor_demand = visitor_knr_demand + visitor_tnc_Demand
                #     #cross border
                #     cross_border_knr_demand = omx_manager.lookup(("CrossBorder", period), omx_key % "SET")
                #     cross_border_tnc_Demand = omx_manager.lookup(("CrossBorder", period), omx_key.replace("KNR","TNC") % "SET")
                #     cross_border_demand = cross_border_knr_demand + cross_border_tnc_Demand                    
                #     #airport SAN
                #     airport_knr_demand = omx_manager.lookup(("Airport", ".SAN" + period), omx_key % "SET")
                #     airport_tnc_Demand = omx_manager.lookup(("Airport", ".SAN" + period), omx_key.replace("KNR","TNC") % "SET")                  
                #     #airport CBX
                #     if omx_manager.file_exists(("Airport", ".CBX" + period)):                    
                #         airport_knr_demand += omx_manager.lookup(("Airport", ".CBX" + period), omx_key % "SET")
                #         airport_tnc_Demand += omx_manager.lookup(("Airport", ".CBX" + period), omx_key.replace("KNR","TNC") % "SET")
                #     airport_demand = airport_knr_demand + airport_tnc_Demand                      
                    #internal external
                    # internal_external_knr_demand = omx_manager.lookup(("InternalExternal", period), omx_key % "SET")
                    # internal_external_tnc_Demand = omx_manager.lookup(("InternalExternal", period), omx_key.replace("KNR","TNC") % "SET")
                    # internal_external_demand = internal_external_knr_demand + internal_external_tnc_Demand
                # else:
                person_demand = omx_manager.lookup(("", period), omx_key % "SET")
                visitor_demand = omx_manager.lookup(("Visitor", period), omx_key % "SET")
                cross_border_demand = omx_manager.lookup(("CrossBorder", period), omx_key % "SET" )
                airport_demand = omx_manager.lookup(("Airport", ".SAN" + period), omx_key % "SET")
                if omx_manager.file_exists(("Airport", ".CBX" + period)):
                    airport_demand += omx_manager.lookup(("Airport", ".CBX" + period), omx_key % "SET")

                # internal_external_demand = omx_manager.lookup(("InternalExternal", period), omx_key)                    
                    
                total_asim_demand = person_demand #for testing only
                total_asim_demand = (
                    visitor_demand  + airport_demand 
                    + person_demand + cross_border_demand)

                # Check the OMX zones are the same Emme database, assume all files have the same zones
                # omx_zones = omx_manager.zone_list("tranTrips%s.omx" % period)
                matrix = emmebank.matrix(matrix_name)
                # if omx_zones != emme_zones:
                #     matrix_data = _matrix.MatrixData(type='f', indices=[omx_zones, omx_zones])
                #     matrix_data.from_numpy(total_asim_demand)
                #     expanded_matrix_data = matrix_data.expand([emme_zones, emme_zones])
                #     matrix.set_data(expanded_matrix_data, self.scenario)
                # else:
                matrix.set_numpy_data(total_asim_demand, self.scenario_dict[period[1:]])
                    
                # if ("KNR" in matrix_name):
                #     dem_utils.demand_report([
                #         ("person_demand", person_demand), 
                #         ("  person_knr_demand", person_knr_demand), 
                #         ("  person_tnc_Demand", person_tnc_Demand),
                #         ("internal_external_demand", internal_external_demand), 
                #         ("  internal_external_knr_demand", internal_external_knr_demand), 
                #         ("  internal_external_tnc_Demand", internal_external_tnc_Demand),
                #         ("cross_border_demand", cross_border_demand),
                #         ("  cross_border_knr_demand", cross_border_knr_demand), 
                #         ("  cross_border_tnc_Demand", cross_border_tnc_Demand),
                #         ("airport_demand", airport_demand), 
                #         ("  airport_knr_demand", airport_knr_demand), 
                #         ("  airport_tnc_Demand", airport_tnc_Demand),
                #         ("visitor_demand", visitor_demand), 
                #         ("  visitor_knr_demand", visitor_knr_demand), 
                #         ("  visitor_tnc_Demand", visitor_tnc_Demand),
                #         ("total_asim_demand", total_asim_demand)
                #     ], logbook_label, self.scenario)
                # else:
                dem_utils.demand_report([
                    ("person_demand", person_demand), 
                    ("cross_border_demand", cross_border_demand),
                    ("airport_demand", airport_demand), 
                    ("visitor_demand", visitor_demand), 
                    ("total_asim_demand", total_asim_demand)
                ], logbook_label, self.scenario_dict[period[1:]])
